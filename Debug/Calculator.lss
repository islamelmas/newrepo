
Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002634  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  00002634  000026c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800072  00800072  000026da  2**0
                  ALLOC
  3 .stab         000028ec  00000000  00000000  000026dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001db1  00000000  00000000  00004fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006d79  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006eb9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007029  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008c72  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009b5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a90c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000aa6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000acf9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b4c7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 58 0c 	jmp	0x18b0	; 0x18b0 <__vector_1>
       8:	0c 94 85 0c 	jmp	0x190a	; 0x190a <__vector_2>
       c:	0c 94 b2 0c 	jmp	0x1964	; 0x1964 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e3       	ldi	r30, 0x34	; 52
      68:	f6 e2       	ldi	r31, 0x26	; 38
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 37       	cpi	r26, 0x72	; 114
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 e7       	ldi	r26, 0x72	; 114
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 37       	cpi	r26, 0x78	; 120
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ca 11 	call	0x2394	; 0x2394 <main>
      8a:	0c 94 18 13 	jmp	0x2630	; 0x2630 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 bb 12 	jmp	0x2576	; 0x2576 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 d7 12 	jmp	0x25ae	; 0x25ae <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 c7 12 	jmp	0x258e	; 0x258e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 e3 12 	jmp	0x25c6	; 0x25c6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 c7 12 	jmp	0x258e	; 0x258e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 e3 12 	jmp	0x25c6	; 0x25c6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 bb 12 	jmp	0x2576	; 0x2576 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 d7 12 	jmp	0x25ae	; 0x25ae <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 c7 12 	jmp	0x258e	; 0x258e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 e3 12 	jmp	0x25c6	; 0x25c6 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 c7 12 	jmp	0x258e	; 0x258e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 e3 12 	jmp	0x25c6	; 0x25c6 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 c7 12 	jmp	0x258e	; 0x258e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 e3 12 	jmp	0x25c6	; 0x25c6 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 cb 12 	jmp	0x2596	; 0x2596 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 e7 12 	jmp	0x25ce	; 0x25ce <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <HLCD_Init>:
#include <util/delay.h>
#include "../Platform/ATMEGA32_Features.h"
#include "../LIB_BMNP/LIB_BMNP.h"
#include "HLCD_int.h"

void HLCD_Init(void) {
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	e8 97       	sbiw	r28, 0x38	; 56
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	DDRC = 0xFF;
     b5a:	e4 e3       	ldi	r30, 0x34	; 52
     b5c:	f0 e0       	ldi	r31, 0x00	; 0
     b5e:	8f ef       	ldi	r24, 0xFF	; 255
     b60:	80 83       	st	Z, r24
	DDRA = 0xFF;
     b62:	ea e3       	ldi	r30, 0x3A	; 58
     b64:	f0 e0       	ldi	r31, 0x00	; 0
     b66:	8f ef       	ldi	r24, 0xFF	; 255
     b68:	80 83       	st	Z, r24
	HLCD_WriteCmd(HLCD_ClEARSCREEN);
     b6a:	81 e0       	ldi	r24, 0x01	; 1
     b6c:	0e 94 92 07 	call	0xf24	; 0xf24 <HLCD_WriteCmd>
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	a0 e2       	ldi	r26, 0x20	; 32
     b76:	b2 e4       	ldi	r27, 0x42	; 66
     b78:	8d ab       	std	Y+53, r24	; 0x35
     b7a:	9e ab       	std	Y+54, r25	; 0x36
     b7c:	af ab       	std	Y+55, r26	; 0x37
     b7e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b80:	6d a9       	ldd	r22, Y+53	; 0x35
     b82:	7e a9       	ldd	r23, Y+54	; 0x36
     b84:	8f a9       	ldd	r24, Y+55	; 0x37
     b86:	98 ad       	ldd	r25, Y+56	; 0x38
     b88:	20 e0       	ldi	r18, 0x00	; 0
     b8a:	30 e0       	ldi	r19, 0x00	; 0
     b8c:	4a ef       	ldi	r20, 0xFA	; 250
     b8e:	54 e4       	ldi	r21, 0x44	; 68
     b90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     b94:	dc 01       	movw	r26, r24
     b96:	cb 01       	movw	r24, r22
     b98:	89 ab       	std	Y+49, r24	; 0x31
     b9a:	9a ab       	std	Y+50, r25	; 0x32
     b9c:	ab ab       	std	Y+51, r26	; 0x33
     b9e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     ba0:	69 a9       	ldd	r22, Y+49	; 0x31
     ba2:	7a a9       	ldd	r23, Y+50	; 0x32
     ba4:	8b a9       	ldd	r24, Y+51	; 0x33
     ba6:	9c a9       	ldd	r25, Y+52	; 0x34
     ba8:	20 e0       	ldi	r18, 0x00	; 0
     baa:	30 e0       	ldi	r19, 0x00	; 0
     bac:	40 e8       	ldi	r20, 0x80	; 128
     bae:	5f e3       	ldi	r21, 0x3F	; 63
     bb0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bb4:	88 23       	and	r24, r24
     bb6:	2c f4       	brge	.+10     	; 0xbc2 <HLCD_Init+0x7c>
		__ticks = 1;
     bb8:	81 e0       	ldi	r24, 0x01	; 1
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	98 ab       	std	Y+48, r25	; 0x30
     bbe:	8f a7       	std	Y+47, r24	; 0x2f
     bc0:	3f c0       	rjmp	.+126    	; 0xc40 <HLCD_Init+0xfa>
	else if (__tmp > 65535)
     bc2:	69 a9       	ldd	r22, Y+49	; 0x31
     bc4:	7a a9       	ldd	r23, Y+50	; 0x32
     bc6:	8b a9       	ldd	r24, Y+51	; 0x33
     bc8:	9c a9       	ldd	r25, Y+52	; 0x34
     bca:	20 e0       	ldi	r18, 0x00	; 0
     bcc:	3f ef       	ldi	r19, 0xFF	; 255
     bce:	4f e7       	ldi	r20, 0x7F	; 127
     bd0:	57 e4       	ldi	r21, 0x47	; 71
     bd2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     bd6:	18 16       	cp	r1, r24
     bd8:	4c f5       	brge	.+82     	; 0xc2c <HLCD_Init+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bda:	6d a9       	ldd	r22, Y+53	; 0x35
     bdc:	7e a9       	ldd	r23, Y+54	; 0x36
     bde:	8f a9       	ldd	r24, Y+55	; 0x37
     be0:	98 ad       	ldd	r25, Y+56	; 0x38
     be2:	20 e0       	ldi	r18, 0x00	; 0
     be4:	30 e0       	ldi	r19, 0x00	; 0
     be6:	40 e2       	ldi	r20, 0x20	; 32
     be8:	51 e4       	ldi	r21, 0x41	; 65
     bea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bee:	dc 01       	movw	r26, r24
     bf0:	cb 01       	movw	r24, r22
     bf2:	bc 01       	movw	r22, r24
     bf4:	cd 01       	movw	r24, r26
     bf6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     bfa:	dc 01       	movw	r26, r24
     bfc:	cb 01       	movw	r24, r22
     bfe:	98 ab       	std	Y+48, r25	; 0x30
     c00:	8f a7       	std	Y+47, r24	; 0x2f
     c02:	0f c0       	rjmp	.+30     	; 0xc22 <HLCD_Init+0xdc>
     c04:	88 ec       	ldi	r24, 0xC8	; 200
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	9e a7       	std	Y+46, r25	; 0x2e
     c0a:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c0c:	8d a5       	ldd	r24, Y+45	; 0x2d
     c0e:	9e a5       	ldd	r25, Y+46	; 0x2e
     c10:	01 97       	sbiw	r24, 0x01	; 1
     c12:	f1 f7       	brne	.-4      	; 0xc10 <HLCD_Init+0xca>
     c14:	9e a7       	std	Y+46, r25	; 0x2e
     c16:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c18:	8f a5       	ldd	r24, Y+47	; 0x2f
     c1a:	98 a9       	ldd	r25, Y+48	; 0x30
     c1c:	01 97       	sbiw	r24, 0x01	; 1
     c1e:	98 ab       	std	Y+48, r25	; 0x30
     c20:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c22:	8f a5       	ldd	r24, Y+47	; 0x2f
     c24:	98 a9       	ldd	r25, Y+48	; 0x30
     c26:	00 97       	sbiw	r24, 0x00	; 0
     c28:	69 f7       	brne	.-38     	; 0xc04 <HLCD_Init+0xbe>
     c2a:	14 c0       	rjmp	.+40     	; 0xc54 <HLCD_Init+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c2c:	69 a9       	ldd	r22, Y+49	; 0x31
     c2e:	7a a9       	ldd	r23, Y+50	; 0x32
     c30:	8b a9       	ldd	r24, Y+51	; 0x33
     c32:	9c a9       	ldd	r25, Y+52	; 0x34
     c34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c38:	dc 01       	movw	r26, r24
     c3a:	cb 01       	movw	r24, r22
     c3c:	98 ab       	std	Y+48, r25	; 0x30
     c3e:	8f a7       	std	Y+47, r24	; 0x2f
     c40:	8f a5       	ldd	r24, Y+47	; 0x2f
     c42:	98 a9       	ldd	r25, Y+48	; 0x30
     c44:	9c a7       	std	Y+44, r25	; 0x2c
     c46:	8b a7       	std	Y+43, r24	; 0x2b
     c48:	8b a5       	ldd	r24, Y+43	; 0x2b
     c4a:	9c a5       	ldd	r25, Y+44	; 0x2c
     c4c:	01 97       	sbiw	r24, 0x01	; 1
     c4e:	f1 f7       	brne	.-4      	; 0xc4c <HLCD_Init+0x106>
     c50:	9c a7       	std	Y+44, r25	; 0x2c
     c52:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(40);
	HLCD_WriteCmd(0b00111100);
     c54:	8c e3       	ldi	r24, 0x3C	; 60
     c56:	0e 94 92 07 	call	0xf24	; 0xf24 <HLCD_WriteCmd>
     c5a:	80 e0       	ldi	r24, 0x00	; 0
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	a0 e8       	ldi	r26, 0x80	; 128
     c60:	bf e3       	ldi	r27, 0x3F	; 63
     c62:	8f a3       	std	Y+39, r24	; 0x27
     c64:	98 a7       	std	Y+40, r25	; 0x28
     c66:	a9 a7       	std	Y+41, r26	; 0x29
     c68:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c6a:	6f a1       	ldd	r22, Y+39	; 0x27
     c6c:	78 a5       	ldd	r23, Y+40	; 0x28
     c6e:	89 a5       	ldd	r24, Y+41	; 0x29
     c70:	9a a5       	ldd	r25, Y+42	; 0x2a
     c72:	20 e0       	ldi	r18, 0x00	; 0
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	4a ef       	ldi	r20, 0xFA	; 250
     c78:	54 e4       	ldi	r21, 0x44	; 68
     c7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c7e:	dc 01       	movw	r26, r24
     c80:	cb 01       	movw	r24, r22
     c82:	8b a3       	std	Y+35, r24	; 0x23
     c84:	9c a3       	std	Y+36, r25	; 0x24
     c86:	ad a3       	std	Y+37, r26	; 0x25
     c88:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     c8a:	6b a1       	ldd	r22, Y+35	; 0x23
     c8c:	7c a1       	ldd	r23, Y+36	; 0x24
     c8e:	8d a1       	ldd	r24, Y+37	; 0x25
     c90:	9e a1       	ldd	r25, Y+38	; 0x26
     c92:	20 e0       	ldi	r18, 0x00	; 0
     c94:	30 e0       	ldi	r19, 0x00	; 0
     c96:	40 e8       	ldi	r20, 0x80	; 128
     c98:	5f e3       	ldi	r21, 0x3F	; 63
     c9a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c9e:	88 23       	and	r24, r24
     ca0:	2c f4       	brge	.+10     	; 0xcac <HLCD_Init+0x166>
		__ticks = 1;
     ca2:	81 e0       	ldi	r24, 0x01	; 1
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	9a a3       	std	Y+34, r25	; 0x22
     ca8:	89 a3       	std	Y+33, r24	; 0x21
     caa:	3f c0       	rjmp	.+126    	; 0xd2a <HLCD_Init+0x1e4>
	else if (__tmp > 65535)
     cac:	6b a1       	ldd	r22, Y+35	; 0x23
     cae:	7c a1       	ldd	r23, Y+36	; 0x24
     cb0:	8d a1       	ldd	r24, Y+37	; 0x25
     cb2:	9e a1       	ldd	r25, Y+38	; 0x26
     cb4:	20 e0       	ldi	r18, 0x00	; 0
     cb6:	3f ef       	ldi	r19, 0xFF	; 255
     cb8:	4f e7       	ldi	r20, 0x7F	; 127
     cba:	57 e4       	ldi	r21, 0x47	; 71
     cbc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     cc0:	18 16       	cp	r1, r24
     cc2:	4c f5       	brge	.+82     	; 0xd16 <HLCD_Init+0x1d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cc4:	6f a1       	ldd	r22, Y+39	; 0x27
     cc6:	78 a5       	ldd	r23, Y+40	; 0x28
     cc8:	89 a5       	ldd	r24, Y+41	; 0x29
     cca:	9a a5       	ldd	r25, Y+42	; 0x2a
     ccc:	20 e0       	ldi	r18, 0x00	; 0
     cce:	30 e0       	ldi	r19, 0x00	; 0
     cd0:	40 e2       	ldi	r20, 0x20	; 32
     cd2:	51 e4       	ldi	r21, 0x41	; 65
     cd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cd8:	dc 01       	movw	r26, r24
     cda:	cb 01       	movw	r24, r22
     cdc:	bc 01       	movw	r22, r24
     cde:	cd 01       	movw	r24, r26
     ce0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ce4:	dc 01       	movw	r26, r24
     ce6:	cb 01       	movw	r24, r22
     ce8:	9a a3       	std	Y+34, r25	; 0x22
     cea:	89 a3       	std	Y+33, r24	; 0x21
     cec:	0f c0       	rjmp	.+30     	; 0xd0c <HLCD_Init+0x1c6>
     cee:	88 ec       	ldi	r24, 0xC8	; 200
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	98 a3       	std	Y+32, r25	; 0x20
     cf4:	8f 8f       	std	Y+31, r24	; 0x1f
     cf6:	8f 8d       	ldd	r24, Y+31	; 0x1f
     cf8:	98 a1       	ldd	r25, Y+32	; 0x20
     cfa:	01 97       	sbiw	r24, 0x01	; 1
     cfc:	f1 f7       	brne	.-4      	; 0xcfa <HLCD_Init+0x1b4>
     cfe:	98 a3       	std	Y+32, r25	; 0x20
     d00:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d02:	89 a1       	ldd	r24, Y+33	; 0x21
     d04:	9a a1       	ldd	r25, Y+34	; 0x22
     d06:	01 97       	sbiw	r24, 0x01	; 1
     d08:	9a a3       	std	Y+34, r25	; 0x22
     d0a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d0c:	89 a1       	ldd	r24, Y+33	; 0x21
     d0e:	9a a1       	ldd	r25, Y+34	; 0x22
     d10:	00 97       	sbiw	r24, 0x00	; 0
     d12:	69 f7       	brne	.-38     	; 0xcee <HLCD_Init+0x1a8>
     d14:	14 c0       	rjmp	.+40     	; 0xd3e <HLCD_Init+0x1f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d16:	6b a1       	ldd	r22, Y+35	; 0x23
     d18:	7c a1       	ldd	r23, Y+36	; 0x24
     d1a:	8d a1       	ldd	r24, Y+37	; 0x25
     d1c:	9e a1       	ldd	r25, Y+38	; 0x26
     d1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d22:	dc 01       	movw	r26, r24
     d24:	cb 01       	movw	r24, r22
     d26:	9a a3       	std	Y+34, r25	; 0x22
     d28:	89 a3       	std	Y+33, r24	; 0x21
     d2a:	89 a1       	ldd	r24, Y+33	; 0x21
     d2c:	9a a1       	ldd	r25, Y+34	; 0x22
     d2e:	9e 8f       	std	Y+30, r25	; 0x1e
     d30:	8d 8f       	std	Y+29, r24	; 0x1d
     d32:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d34:	9e 8d       	ldd	r25, Y+30	; 0x1e
     d36:	01 97       	sbiw	r24, 0x01	; 1
     d38:	f1 f7       	brne	.-4      	; 0xd36 <HLCD_Init+0x1f0>
     d3a:	9e 8f       	std	Y+30, r25	; 0x1e
     d3c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	HLCD_WriteCmd(0b00001111);
     d3e:	8f e0       	ldi	r24, 0x0F	; 15
     d40:	0e 94 92 07 	call	0xf24	; 0xf24 <HLCD_WriteCmd>
     d44:	80 e0       	ldi	r24, 0x00	; 0
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	a0 e8       	ldi	r26, 0x80	; 128
     d4a:	bf e3       	ldi	r27, 0x3F	; 63
     d4c:	89 8f       	std	Y+25, r24	; 0x19
     d4e:	9a 8f       	std	Y+26, r25	; 0x1a
     d50:	ab 8f       	std	Y+27, r26	; 0x1b
     d52:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d54:	69 8d       	ldd	r22, Y+25	; 0x19
     d56:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d58:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d5a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d5c:	20 e0       	ldi	r18, 0x00	; 0
     d5e:	30 e0       	ldi	r19, 0x00	; 0
     d60:	4a ef       	ldi	r20, 0xFA	; 250
     d62:	54 e4       	ldi	r21, 0x44	; 68
     d64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d68:	dc 01       	movw	r26, r24
     d6a:	cb 01       	movw	r24, r22
     d6c:	8d 8b       	std	Y+21, r24	; 0x15
     d6e:	9e 8b       	std	Y+22, r25	; 0x16
     d70:	af 8b       	std	Y+23, r26	; 0x17
     d72:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     d74:	6d 89       	ldd	r22, Y+21	; 0x15
     d76:	7e 89       	ldd	r23, Y+22	; 0x16
     d78:	8f 89       	ldd	r24, Y+23	; 0x17
     d7a:	98 8d       	ldd	r25, Y+24	; 0x18
     d7c:	20 e0       	ldi	r18, 0x00	; 0
     d7e:	30 e0       	ldi	r19, 0x00	; 0
     d80:	40 e8       	ldi	r20, 0x80	; 128
     d82:	5f e3       	ldi	r21, 0x3F	; 63
     d84:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d88:	88 23       	and	r24, r24
     d8a:	2c f4       	brge	.+10     	; 0xd96 <HLCD_Init+0x250>
		__ticks = 1;
     d8c:	81 e0       	ldi	r24, 0x01	; 1
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	9c 8b       	std	Y+20, r25	; 0x14
     d92:	8b 8b       	std	Y+19, r24	; 0x13
     d94:	3f c0       	rjmp	.+126    	; 0xe14 <HLCD_Init+0x2ce>
	else if (__tmp > 65535)
     d96:	6d 89       	ldd	r22, Y+21	; 0x15
     d98:	7e 89       	ldd	r23, Y+22	; 0x16
     d9a:	8f 89       	ldd	r24, Y+23	; 0x17
     d9c:	98 8d       	ldd	r25, Y+24	; 0x18
     d9e:	20 e0       	ldi	r18, 0x00	; 0
     da0:	3f ef       	ldi	r19, 0xFF	; 255
     da2:	4f e7       	ldi	r20, 0x7F	; 127
     da4:	57 e4       	ldi	r21, 0x47	; 71
     da6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     daa:	18 16       	cp	r1, r24
     dac:	4c f5       	brge	.+82     	; 0xe00 <HLCD_Init+0x2ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dae:	69 8d       	ldd	r22, Y+25	; 0x19
     db0:	7a 8d       	ldd	r23, Y+26	; 0x1a
     db2:	8b 8d       	ldd	r24, Y+27	; 0x1b
     db4:	9c 8d       	ldd	r25, Y+28	; 0x1c
     db6:	20 e0       	ldi	r18, 0x00	; 0
     db8:	30 e0       	ldi	r19, 0x00	; 0
     dba:	40 e2       	ldi	r20, 0x20	; 32
     dbc:	51 e4       	ldi	r21, 0x41	; 65
     dbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dc2:	dc 01       	movw	r26, r24
     dc4:	cb 01       	movw	r24, r22
     dc6:	bc 01       	movw	r22, r24
     dc8:	cd 01       	movw	r24, r26
     dca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dce:	dc 01       	movw	r26, r24
     dd0:	cb 01       	movw	r24, r22
     dd2:	9c 8b       	std	Y+20, r25	; 0x14
     dd4:	8b 8b       	std	Y+19, r24	; 0x13
     dd6:	0f c0       	rjmp	.+30     	; 0xdf6 <HLCD_Init+0x2b0>
     dd8:	88 ec       	ldi	r24, 0xC8	; 200
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	9a 8b       	std	Y+18, r25	; 0x12
     dde:	89 8b       	std	Y+17, r24	; 0x11
     de0:	89 89       	ldd	r24, Y+17	; 0x11
     de2:	9a 89       	ldd	r25, Y+18	; 0x12
     de4:	01 97       	sbiw	r24, 0x01	; 1
     de6:	f1 f7       	brne	.-4      	; 0xde4 <HLCD_Init+0x29e>
     de8:	9a 8b       	std	Y+18, r25	; 0x12
     dea:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dec:	8b 89       	ldd	r24, Y+19	; 0x13
     dee:	9c 89       	ldd	r25, Y+20	; 0x14
     df0:	01 97       	sbiw	r24, 0x01	; 1
     df2:	9c 8b       	std	Y+20, r25	; 0x14
     df4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     df6:	8b 89       	ldd	r24, Y+19	; 0x13
     df8:	9c 89       	ldd	r25, Y+20	; 0x14
     dfa:	00 97       	sbiw	r24, 0x00	; 0
     dfc:	69 f7       	brne	.-38     	; 0xdd8 <HLCD_Init+0x292>
     dfe:	14 c0       	rjmp	.+40     	; 0xe28 <HLCD_Init+0x2e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e00:	6d 89       	ldd	r22, Y+21	; 0x15
     e02:	7e 89       	ldd	r23, Y+22	; 0x16
     e04:	8f 89       	ldd	r24, Y+23	; 0x17
     e06:	98 8d       	ldd	r25, Y+24	; 0x18
     e08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e0c:	dc 01       	movw	r26, r24
     e0e:	cb 01       	movw	r24, r22
     e10:	9c 8b       	std	Y+20, r25	; 0x14
     e12:	8b 8b       	std	Y+19, r24	; 0x13
     e14:	8b 89       	ldd	r24, Y+19	; 0x13
     e16:	9c 89       	ldd	r25, Y+20	; 0x14
     e18:	98 8b       	std	Y+16, r25	; 0x10
     e1a:	8f 87       	std	Y+15, r24	; 0x0f
     e1c:	8f 85       	ldd	r24, Y+15	; 0x0f
     e1e:	98 89       	ldd	r25, Y+16	; 0x10
     e20:	01 97       	sbiw	r24, 0x01	; 1
     e22:	f1 f7       	brne	.-4      	; 0xe20 <HLCD_Init+0x2da>
     e24:	98 8b       	std	Y+16, r25	; 0x10
     e26:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	HLCD_WriteCmd(0x01);
     e28:	81 e0       	ldi	r24, 0x01	; 1
     e2a:	0e 94 92 07 	call	0xf24	; 0xf24 <HLCD_WriteCmd>
     e2e:	80 e0       	ldi	r24, 0x00	; 0
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	a0 e0       	ldi	r26, 0x00	; 0
     e34:	b0 e4       	ldi	r27, 0x40	; 64
     e36:	8b 87       	std	Y+11, r24	; 0x0b
     e38:	9c 87       	std	Y+12, r25	; 0x0c
     e3a:	ad 87       	std	Y+13, r26	; 0x0d
     e3c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e3e:	6b 85       	ldd	r22, Y+11	; 0x0b
     e40:	7c 85       	ldd	r23, Y+12	; 0x0c
     e42:	8d 85       	ldd	r24, Y+13	; 0x0d
     e44:	9e 85       	ldd	r25, Y+14	; 0x0e
     e46:	20 e0       	ldi	r18, 0x00	; 0
     e48:	30 e0       	ldi	r19, 0x00	; 0
     e4a:	4a ef       	ldi	r20, 0xFA	; 250
     e4c:	54 e4       	ldi	r21, 0x44	; 68
     e4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e52:	dc 01       	movw	r26, r24
     e54:	cb 01       	movw	r24, r22
     e56:	8f 83       	std	Y+7, r24	; 0x07
     e58:	98 87       	std	Y+8, r25	; 0x08
     e5a:	a9 87       	std	Y+9, r26	; 0x09
     e5c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e5e:	6f 81       	ldd	r22, Y+7	; 0x07
     e60:	78 85       	ldd	r23, Y+8	; 0x08
     e62:	89 85       	ldd	r24, Y+9	; 0x09
     e64:	9a 85       	ldd	r25, Y+10	; 0x0a
     e66:	20 e0       	ldi	r18, 0x00	; 0
     e68:	30 e0       	ldi	r19, 0x00	; 0
     e6a:	40 e8       	ldi	r20, 0x80	; 128
     e6c:	5f e3       	ldi	r21, 0x3F	; 63
     e6e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e72:	88 23       	and	r24, r24
     e74:	2c f4       	brge	.+10     	; 0xe80 <HLCD_Init+0x33a>
		__ticks = 1;
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	9e 83       	std	Y+6, r25	; 0x06
     e7c:	8d 83       	std	Y+5, r24	; 0x05
     e7e:	3f c0       	rjmp	.+126    	; 0xefe <HLCD_Init+0x3b8>
	else if (__tmp > 65535)
     e80:	6f 81       	ldd	r22, Y+7	; 0x07
     e82:	78 85       	ldd	r23, Y+8	; 0x08
     e84:	89 85       	ldd	r24, Y+9	; 0x09
     e86:	9a 85       	ldd	r25, Y+10	; 0x0a
     e88:	20 e0       	ldi	r18, 0x00	; 0
     e8a:	3f ef       	ldi	r19, 0xFF	; 255
     e8c:	4f e7       	ldi	r20, 0x7F	; 127
     e8e:	57 e4       	ldi	r21, 0x47	; 71
     e90:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e94:	18 16       	cp	r1, r24
     e96:	4c f5       	brge	.+82     	; 0xeea <HLCD_Init+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e98:	6b 85       	ldd	r22, Y+11	; 0x0b
     e9a:	7c 85       	ldd	r23, Y+12	; 0x0c
     e9c:	8d 85       	ldd	r24, Y+13	; 0x0d
     e9e:	9e 85       	ldd	r25, Y+14	; 0x0e
     ea0:	20 e0       	ldi	r18, 0x00	; 0
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	40 e2       	ldi	r20, 0x20	; 32
     ea6:	51 e4       	ldi	r21, 0x41	; 65
     ea8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     eac:	dc 01       	movw	r26, r24
     eae:	cb 01       	movw	r24, r22
     eb0:	bc 01       	movw	r22, r24
     eb2:	cd 01       	movw	r24, r26
     eb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     eb8:	dc 01       	movw	r26, r24
     eba:	cb 01       	movw	r24, r22
     ebc:	9e 83       	std	Y+6, r25	; 0x06
     ebe:	8d 83       	std	Y+5, r24	; 0x05
     ec0:	0f c0       	rjmp	.+30     	; 0xee0 <HLCD_Init+0x39a>
     ec2:	88 ec       	ldi	r24, 0xC8	; 200
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	9c 83       	std	Y+4, r25	; 0x04
     ec8:	8b 83       	std	Y+3, r24	; 0x03
     eca:	8b 81       	ldd	r24, Y+3	; 0x03
     ecc:	9c 81       	ldd	r25, Y+4	; 0x04
     ece:	01 97       	sbiw	r24, 0x01	; 1
     ed0:	f1 f7       	brne	.-4      	; 0xece <HLCD_Init+0x388>
     ed2:	9c 83       	std	Y+4, r25	; 0x04
     ed4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ed6:	8d 81       	ldd	r24, Y+5	; 0x05
     ed8:	9e 81       	ldd	r25, Y+6	; 0x06
     eda:	01 97       	sbiw	r24, 0x01	; 1
     edc:	9e 83       	std	Y+6, r25	; 0x06
     ede:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ee0:	8d 81       	ldd	r24, Y+5	; 0x05
     ee2:	9e 81       	ldd	r25, Y+6	; 0x06
     ee4:	00 97       	sbiw	r24, 0x00	; 0
     ee6:	69 f7       	brne	.-38     	; 0xec2 <HLCD_Init+0x37c>
     ee8:	14 c0       	rjmp	.+40     	; 0xf12 <HLCD_Init+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     eea:	6f 81       	ldd	r22, Y+7	; 0x07
     eec:	78 85       	ldd	r23, Y+8	; 0x08
     eee:	89 85       	ldd	r24, Y+9	; 0x09
     ef0:	9a 85       	ldd	r25, Y+10	; 0x0a
     ef2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ef6:	dc 01       	movw	r26, r24
     ef8:	cb 01       	movw	r24, r22
     efa:	9e 83       	std	Y+6, r25	; 0x06
     efc:	8d 83       	std	Y+5, r24	; 0x05
     efe:	8d 81       	ldd	r24, Y+5	; 0x05
     f00:	9e 81       	ldd	r25, Y+6	; 0x06
     f02:	9a 83       	std	Y+2, r25	; 0x02
     f04:	89 83       	std	Y+1, r24	; 0x01
     f06:	89 81       	ldd	r24, Y+1	; 0x01
     f08:	9a 81       	ldd	r25, Y+2	; 0x02
     f0a:	01 97       	sbiw	r24, 0x01	; 1
     f0c:	f1 f7       	brne	.-4      	; 0xf0a <HLCD_Init+0x3c4>
     f0e:	9a 83       	std	Y+2, r25	; 0x02
     f10:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

}
     f12:	e8 96       	adiw	r28, 0x38	; 56
     f14:	0f b6       	in	r0, 0x3f	; 63
     f16:	f8 94       	cli
     f18:	de bf       	out	0x3e, r29	; 62
     f1a:	0f be       	out	0x3f, r0	; 63
     f1c:	cd bf       	out	0x3d, r28	; 61
     f1e:	cf 91       	pop	r28
     f20:	df 91       	pop	r29
     f22:	08 95       	ret

00000f24 <HLCD_WriteCmd>:
void HLCD_WriteCmd(u8 u8cmdcpy) {
     f24:	df 93       	push	r29
     f26:	cf 93       	push	r28
     f28:	cd b7       	in	r28, 0x3d	; 61
     f2a:	de b7       	in	r29, 0x3e	; 62
     f2c:	2f 97       	sbiw	r28, 0x0f	; 15
     f2e:	0f b6       	in	r0, 0x3f	; 63
     f30:	f8 94       	cli
     f32:	de bf       	out	0x3e, r29	; 62
     f34:	0f be       	out	0x3f, r0	; 63
     f36:	cd bf       	out	0x3d, r28	; 61
     f38:	8f 87       	std	Y+15, r24	; 0x0f
	ClearBit(PORTA, 0);
     f3a:	ab e3       	ldi	r26, 0x3B	; 59
     f3c:	b0 e0       	ldi	r27, 0x00	; 0
     f3e:	eb e3       	ldi	r30, 0x3B	; 59
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	80 81       	ld	r24, Z
     f44:	8e 7f       	andi	r24, 0xFE	; 254
     f46:	8c 93       	st	X, r24
	ClearBit(PORTA, 1);
     f48:	ab e3       	ldi	r26, 0x3B	; 59
     f4a:	b0 e0       	ldi	r27, 0x00	; 0
     f4c:	eb e3       	ldi	r30, 0x3B	; 59
     f4e:	f0 e0       	ldi	r31, 0x00	; 0
     f50:	80 81       	ld	r24, Z
     f52:	8d 7f       	andi	r24, 0xFD	; 253
     f54:	8c 93       	st	X, r24
	PORTC = u8cmdcpy;
     f56:	e5 e3       	ldi	r30, 0x35	; 53
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	8f 85       	ldd	r24, Y+15	; 0x0f
     f5c:	80 83       	st	Z, r24
	SetBit(PORTA, 2);
     f5e:	ab e3       	ldi	r26, 0x3B	; 59
     f60:	b0 e0       	ldi	r27, 0x00	; 0
     f62:	eb e3       	ldi	r30, 0x3B	; 59
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	80 81       	ld	r24, Z
     f68:	84 60       	ori	r24, 0x04	; 4
     f6a:	8c 93       	st	X, r24
     f6c:	80 e0       	ldi	r24, 0x00	; 0
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	a0 e0       	ldi	r26, 0x00	; 0
     f72:	b0 e4       	ldi	r27, 0x40	; 64
     f74:	8b 87       	std	Y+11, r24	; 0x0b
     f76:	9c 87       	std	Y+12, r25	; 0x0c
     f78:	ad 87       	std	Y+13, r26	; 0x0d
     f7a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f7c:	6b 85       	ldd	r22, Y+11	; 0x0b
     f7e:	7c 85       	ldd	r23, Y+12	; 0x0c
     f80:	8d 85       	ldd	r24, Y+13	; 0x0d
     f82:	9e 85       	ldd	r25, Y+14	; 0x0e
     f84:	20 e0       	ldi	r18, 0x00	; 0
     f86:	30 e0       	ldi	r19, 0x00	; 0
     f88:	4a ef       	ldi	r20, 0xFA	; 250
     f8a:	54 e4       	ldi	r21, 0x44	; 68
     f8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f90:	dc 01       	movw	r26, r24
     f92:	cb 01       	movw	r24, r22
     f94:	8f 83       	std	Y+7, r24	; 0x07
     f96:	98 87       	std	Y+8, r25	; 0x08
     f98:	a9 87       	std	Y+9, r26	; 0x09
     f9a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f9c:	6f 81       	ldd	r22, Y+7	; 0x07
     f9e:	78 85       	ldd	r23, Y+8	; 0x08
     fa0:	89 85       	ldd	r24, Y+9	; 0x09
     fa2:	9a 85       	ldd	r25, Y+10	; 0x0a
     fa4:	20 e0       	ldi	r18, 0x00	; 0
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	40 e8       	ldi	r20, 0x80	; 128
     faa:	5f e3       	ldi	r21, 0x3F	; 63
     fac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     fb0:	88 23       	and	r24, r24
     fb2:	2c f4       	brge	.+10     	; 0xfbe <HLCD_WriteCmd+0x9a>
		__ticks = 1;
     fb4:	81 e0       	ldi	r24, 0x01	; 1
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	9e 83       	std	Y+6, r25	; 0x06
     fba:	8d 83       	std	Y+5, r24	; 0x05
     fbc:	3f c0       	rjmp	.+126    	; 0x103c <HLCD_WriteCmd+0x118>
	else if (__tmp > 65535)
     fbe:	6f 81       	ldd	r22, Y+7	; 0x07
     fc0:	78 85       	ldd	r23, Y+8	; 0x08
     fc2:	89 85       	ldd	r24, Y+9	; 0x09
     fc4:	9a 85       	ldd	r25, Y+10	; 0x0a
     fc6:	20 e0       	ldi	r18, 0x00	; 0
     fc8:	3f ef       	ldi	r19, 0xFF	; 255
     fca:	4f e7       	ldi	r20, 0x7F	; 127
     fcc:	57 e4       	ldi	r21, 0x47	; 71
     fce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     fd2:	18 16       	cp	r1, r24
     fd4:	4c f5       	brge	.+82     	; 0x1028 <HLCD_WriteCmd+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fd6:	6b 85       	ldd	r22, Y+11	; 0x0b
     fd8:	7c 85       	ldd	r23, Y+12	; 0x0c
     fda:	8d 85       	ldd	r24, Y+13	; 0x0d
     fdc:	9e 85       	ldd	r25, Y+14	; 0x0e
     fde:	20 e0       	ldi	r18, 0x00	; 0
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	40 e2       	ldi	r20, 0x20	; 32
     fe4:	51 e4       	ldi	r21, 0x41	; 65
     fe6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fea:	dc 01       	movw	r26, r24
     fec:	cb 01       	movw	r24, r22
     fee:	bc 01       	movw	r22, r24
     ff0:	cd 01       	movw	r24, r26
     ff2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ff6:	dc 01       	movw	r26, r24
     ff8:	cb 01       	movw	r24, r22
     ffa:	9e 83       	std	Y+6, r25	; 0x06
     ffc:	8d 83       	std	Y+5, r24	; 0x05
     ffe:	0f c0       	rjmp	.+30     	; 0x101e <HLCD_WriteCmd+0xfa>
    1000:	88 ec       	ldi	r24, 0xC8	; 200
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	9c 83       	std	Y+4, r25	; 0x04
    1006:	8b 83       	std	Y+3, r24	; 0x03
    1008:	8b 81       	ldd	r24, Y+3	; 0x03
    100a:	9c 81       	ldd	r25, Y+4	; 0x04
    100c:	01 97       	sbiw	r24, 0x01	; 1
    100e:	f1 f7       	brne	.-4      	; 0x100c <HLCD_WriteCmd+0xe8>
    1010:	9c 83       	std	Y+4, r25	; 0x04
    1012:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1014:	8d 81       	ldd	r24, Y+5	; 0x05
    1016:	9e 81       	ldd	r25, Y+6	; 0x06
    1018:	01 97       	sbiw	r24, 0x01	; 1
    101a:	9e 83       	std	Y+6, r25	; 0x06
    101c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    101e:	8d 81       	ldd	r24, Y+5	; 0x05
    1020:	9e 81       	ldd	r25, Y+6	; 0x06
    1022:	00 97       	sbiw	r24, 0x00	; 0
    1024:	69 f7       	brne	.-38     	; 0x1000 <HLCD_WriteCmd+0xdc>
    1026:	14 c0       	rjmp	.+40     	; 0x1050 <HLCD_WriteCmd+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1028:	6f 81       	ldd	r22, Y+7	; 0x07
    102a:	78 85       	ldd	r23, Y+8	; 0x08
    102c:	89 85       	ldd	r24, Y+9	; 0x09
    102e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1030:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1034:	dc 01       	movw	r26, r24
    1036:	cb 01       	movw	r24, r22
    1038:	9e 83       	std	Y+6, r25	; 0x06
    103a:	8d 83       	std	Y+5, r24	; 0x05
    103c:	8d 81       	ldd	r24, Y+5	; 0x05
    103e:	9e 81       	ldd	r25, Y+6	; 0x06
    1040:	9a 83       	std	Y+2, r25	; 0x02
    1042:	89 83       	std	Y+1, r24	; 0x01
    1044:	89 81       	ldd	r24, Y+1	; 0x01
    1046:	9a 81       	ldd	r25, Y+2	; 0x02
    1048:	01 97       	sbiw	r24, 0x01	; 1
    104a:	f1 f7       	brne	.-4      	; 0x1048 <HLCD_WriteCmd+0x124>
    104c:	9a 83       	std	Y+2, r25	; 0x02
    104e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	ClearBit(PORTA, 2);
    1050:	ab e3       	ldi	r26, 0x3B	; 59
    1052:	b0 e0       	ldi	r27, 0x00	; 0
    1054:	eb e3       	ldi	r30, 0x3B	; 59
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	80 81       	ld	r24, Z
    105a:	8b 7f       	andi	r24, 0xFB	; 251
    105c:	8c 93       	st	X, r24

}
    105e:	2f 96       	adiw	r28, 0x0f	; 15
    1060:	0f b6       	in	r0, 0x3f	; 63
    1062:	f8 94       	cli
    1064:	de bf       	out	0x3e, r29	; 62
    1066:	0f be       	out	0x3f, r0	; 63
    1068:	cd bf       	out	0x3d, r28	; 61
    106a:	cf 91       	pop	r28
    106c:	df 91       	pop	r29
    106e:	08 95       	ret

00001070 <HLCD_WriteData>:
void HLCD_WriteData(u8 u8datacpy) {
    1070:	df 93       	push	r29
    1072:	cf 93       	push	r28
    1074:	cd b7       	in	r28, 0x3d	; 61
    1076:	de b7       	in	r29, 0x3e	; 62
    1078:	2f 97       	sbiw	r28, 0x0f	; 15
    107a:	0f b6       	in	r0, 0x3f	; 63
    107c:	f8 94       	cli
    107e:	de bf       	out	0x3e, r29	; 62
    1080:	0f be       	out	0x3f, r0	; 63
    1082:	cd bf       	out	0x3d, r28	; 61
    1084:	8f 87       	std	Y+15, r24	; 0x0f
	SetBit(PORTA, 0);
    1086:	ab e3       	ldi	r26, 0x3B	; 59
    1088:	b0 e0       	ldi	r27, 0x00	; 0
    108a:	eb e3       	ldi	r30, 0x3B	; 59
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	80 81       	ld	r24, Z
    1090:	81 60       	ori	r24, 0x01	; 1
    1092:	8c 93       	st	X, r24
	ClearBit(PORTA, 1);
    1094:	ab e3       	ldi	r26, 0x3B	; 59
    1096:	b0 e0       	ldi	r27, 0x00	; 0
    1098:	eb e3       	ldi	r30, 0x3B	; 59
    109a:	f0 e0       	ldi	r31, 0x00	; 0
    109c:	80 81       	ld	r24, Z
    109e:	8d 7f       	andi	r24, 0xFD	; 253
    10a0:	8c 93       	st	X, r24
	PORTC = u8datacpy;
    10a2:	e5 e3       	ldi	r30, 0x35	; 53
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    10a8:	80 83       	st	Z, r24
	SetBit(PORTA, 2);
    10aa:	ab e3       	ldi	r26, 0x3B	; 59
    10ac:	b0 e0       	ldi	r27, 0x00	; 0
    10ae:	eb e3       	ldi	r30, 0x3B	; 59
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	80 81       	ld	r24, Z
    10b4:	84 60       	ori	r24, 0x04	; 4
    10b6:	8c 93       	st	X, r24
    10b8:	80 e0       	ldi	r24, 0x00	; 0
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	a0 e0       	ldi	r26, 0x00	; 0
    10be:	b0 e4       	ldi	r27, 0x40	; 64
    10c0:	8b 87       	std	Y+11, r24	; 0x0b
    10c2:	9c 87       	std	Y+12, r25	; 0x0c
    10c4:	ad 87       	std	Y+13, r26	; 0x0d
    10c6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    10ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    10cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    10ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    10d0:	20 e0       	ldi	r18, 0x00	; 0
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	4a ef       	ldi	r20, 0xFA	; 250
    10d6:	54 e4       	ldi	r21, 0x44	; 68
    10d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10dc:	dc 01       	movw	r26, r24
    10de:	cb 01       	movw	r24, r22
    10e0:	8f 83       	std	Y+7, r24	; 0x07
    10e2:	98 87       	std	Y+8, r25	; 0x08
    10e4:	a9 87       	std	Y+9, r26	; 0x09
    10e6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10e8:	6f 81       	ldd	r22, Y+7	; 0x07
    10ea:	78 85       	ldd	r23, Y+8	; 0x08
    10ec:	89 85       	ldd	r24, Y+9	; 0x09
    10ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    10f0:	20 e0       	ldi	r18, 0x00	; 0
    10f2:	30 e0       	ldi	r19, 0x00	; 0
    10f4:	40 e8       	ldi	r20, 0x80	; 128
    10f6:	5f e3       	ldi	r21, 0x3F	; 63
    10f8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10fc:	88 23       	and	r24, r24
    10fe:	2c f4       	brge	.+10     	; 0x110a <HLCD_WriteData+0x9a>
		__ticks = 1;
    1100:	81 e0       	ldi	r24, 0x01	; 1
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	9e 83       	std	Y+6, r25	; 0x06
    1106:	8d 83       	std	Y+5, r24	; 0x05
    1108:	3f c0       	rjmp	.+126    	; 0x1188 <HLCD_WriteData+0x118>
	else if (__tmp > 65535)
    110a:	6f 81       	ldd	r22, Y+7	; 0x07
    110c:	78 85       	ldd	r23, Y+8	; 0x08
    110e:	89 85       	ldd	r24, Y+9	; 0x09
    1110:	9a 85       	ldd	r25, Y+10	; 0x0a
    1112:	20 e0       	ldi	r18, 0x00	; 0
    1114:	3f ef       	ldi	r19, 0xFF	; 255
    1116:	4f e7       	ldi	r20, 0x7F	; 127
    1118:	57 e4       	ldi	r21, 0x47	; 71
    111a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    111e:	18 16       	cp	r1, r24
    1120:	4c f5       	brge	.+82     	; 0x1174 <HLCD_WriteData+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1122:	6b 85       	ldd	r22, Y+11	; 0x0b
    1124:	7c 85       	ldd	r23, Y+12	; 0x0c
    1126:	8d 85       	ldd	r24, Y+13	; 0x0d
    1128:	9e 85       	ldd	r25, Y+14	; 0x0e
    112a:	20 e0       	ldi	r18, 0x00	; 0
    112c:	30 e0       	ldi	r19, 0x00	; 0
    112e:	40 e2       	ldi	r20, 0x20	; 32
    1130:	51 e4       	ldi	r21, 0x41	; 65
    1132:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1136:	dc 01       	movw	r26, r24
    1138:	cb 01       	movw	r24, r22
    113a:	bc 01       	movw	r22, r24
    113c:	cd 01       	movw	r24, r26
    113e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1142:	dc 01       	movw	r26, r24
    1144:	cb 01       	movw	r24, r22
    1146:	9e 83       	std	Y+6, r25	; 0x06
    1148:	8d 83       	std	Y+5, r24	; 0x05
    114a:	0f c0       	rjmp	.+30     	; 0x116a <HLCD_WriteData+0xfa>
    114c:	88 ec       	ldi	r24, 0xC8	; 200
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	9c 83       	std	Y+4, r25	; 0x04
    1152:	8b 83       	std	Y+3, r24	; 0x03
    1154:	8b 81       	ldd	r24, Y+3	; 0x03
    1156:	9c 81       	ldd	r25, Y+4	; 0x04
    1158:	01 97       	sbiw	r24, 0x01	; 1
    115a:	f1 f7       	brne	.-4      	; 0x1158 <HLCD_WriteData+0xe8>
    115c:	9c 83       	std	Y+4, r25	; 0x04
    115e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1160:	8d 81       	ldd	r24, Y+5	; 0x05
    1162:	9e 81       	ldd	r25, Y+6	; 0x06
    1164:	01 97       	sbiw	r24, 0x01	; 1
    1166:	9e 83       	std	Y+6, r25	; 0x06
    1168:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    116a:	8d 81       	ldd	r24, Y+5	; 0x05
    116c:	9e 81       	ldd	r25, Y+6	; 0x06
    116e:	00 97       	sbiw	r24, 0x00	; 0
    1170:	69 f7       	brne	.-38     	; 0x114c <HLCD_WriteData+0xdc>
    1172:	14 c0       	rjmp	.+40     	; 0x119c <HLCD_WriteData+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1174:	6f 81       	ldd	r22, Y+7	; 0x07
    1176:	78 85       	ldd	r23, Y+8	; 0x08
    1178:	89 85       	ldd	r24, Y+9	; 0x09
    117a:	9a 85       	ldd	r25, Y+10	; 0x0a
    117c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1180:	dc 01       	movw	r26, r24
    1182:	cb 01       	movw	r24, r22
    1184:	9e 83       	std	Y+6, r25	; 0x06
    1186:	8d 83       	std	Y+5, r24	; 0x05
    1188:	8d 81       	ldd	r24, Y+5	; 0x05
    118a:	9e 81       	ldd	r25, Y+6	; 0x06
    118c:	9a 83       	std	Y+2, r25	; 0x02
    118e:	89 83       	std	Y+1, r24	; 0x01
    1190:	89 81       	ldd	r24, Y+1	; 0x01
    1192:	9a 81       	ldd	r25, Y+2	; 0x02
    1194:	01 97       	sbiw	r24, 0x01	; 1
    1196:	f1 f7       	brne	.-4      	; 0x1194 <HLCD_WriteData+0x124>
    1198:	9a 83       	std	Y+2, r25	; 0x02
    119a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	ClearBit(PORTA, 2);
    119c:	ab e3       	ldi	r26, 0x3B	; 59
    119e:	b0 e0       	ldi	r27, 0x00	; 0
    11a0:	eb e3       	ldi	r30, 0x3B	; 59
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	8b 7f       	andi	r24, 0xFB	; 251
    11a8:	8c 93       	st	X, r24

}
    11aa:	2f 96       	adiw	r28, 0x0f	; 15
    11ac:	0f b6       	in	r0, 0x3f	; 63
    11ae:	f8 94       	cli
    11b0:	de bf       	out	0x3e, r29	; 62
    11b2:	0f be       	out	0x3f, r0	; 63
    11b4:	cd bf       	out	0x3d, r28	; 61
    11b6:	cf 91       	pop	r28
    11b8:	df 91       	pop	r29
    11ba:	08 95       	ret

000011bc <HLCD_WriteNum>:
void HLCD_WriteNum(u8 u8datacpy) {
    11bc:	df 93       	push	r29
    11be:	cf 93       	push	r28
    11c0:	cd b7       	in	r28, 0x3d	; 61
    11c2:	de b7       	in	r29, 0x3e	; 62
    11c4:	2f 97       	sbiw	r28, 0x0f	; 15
    11c6:	0f b6       	in	r0, 0x3f	; 63
    11c8:	f8 94       	cli
    11ca:	de bf       	out	0x3e, r29	; 62
    11cc:	0f be       	out	0x3f, r0	; 63
    11ce:	cd bf       	out	0x3d, r28	; 61
    11d0:	8f 87       	std	Y+15, r24	; 0x0f
	SetBit(PORTA, 0);
    11d2:	ab e3       	ldi	r26, 0x3B	; 59
    11d4:	b0 e0       	ldi	r27, 0x00	; 0
    11d6:	eb e3       	ldi	r30, 0x3B	; 59
    11d8:	f0 e0       	ldi	r31, 0x00	; 0
    11da:	80 81       	ld	r24, Z
    11dc:	81 60       	ori	r24, 0x01	; 1
    11de:	8c 93       	st	X, r24
	ClearBit(PORTA, 1);
    11e0:	ab e3       	ldi	r26, 0x3B	; 59
    11e2:	b0 e0       	ldi	r27, 0x00	; 0
    11e4:	eb e3       	ldi	r30, 0x3B	; 59
    11e6:	f0 e0       	ldi	r31, 0x00	; 0
    11e8:	80 81       	ld	r24, Z
    11ea:	8d 7f       	andi	r24, 0xFD	; 253
    11ec:	8c 93       	st	X, r24
	PORTC = u8datacpy + 0b110000;
    11ee:	e5 e3       	ldi	r30, 0x35	; 53
    11f0:	f0 e0       	ldi	r31, 0x00	; 0
    11f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    11f4:	80 5d       	subi	r24, 0xD0	; 208
    11f6:	80 83       	st	Z, r24
	SetBit(PORTA, 2);
    11f8:	ab e3       	ldi	r26, 0x3B	; 59
    11fa:	b0 e0       	ldi	r27, 0x00	; 0
    11fc:	eb e3       	ldi	r30, 0x3B	; 59
    11fe:	f0 e0       	ldi	r31, 0x00	; 0
    1200:	80 81       	ld	r24, Z
    1202:	84 60       	ori	r24, 0x04	; 4
    1204:	8c 93       	st	X, r24
    1206:	80 e0       	ldi	r24, 0x00	; 0
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	a0 e0       	ldi	r26, 0x00	; 0
    120c:	b0 e4       	ldi	r27, 0x40	; 64
    120e:	8b 87       	std	Y+11, r24	; 0x0b
    1210:	9c 87       	std	Y+12, r25	; 0x0c
    1212:	ad 87       	std	Y+13, r26	; 0x0d
    1214:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1216:	6b 85       	ldd	r22, Y+11	; 0x0b
    1218:	7c 85       	ldd	r23, Y+12	; 0x0c
    121a:	8d 85       	ldd	r24, Y+13	; 0x0d
    121c:	9e 85       	ldd	r25, Y+14	; 0x0e
    121e:	20 e0       	ldi	r18, 0x00	; 0
    1220:	30 e0       	ldi	r19, 0x00	; 0
    1222:	4a ef       	ldi	r20, 0xFA	; 250
    1224:	54 e4       	ldi	r21, 0x44	; 68
    1226:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    122a:	dc 01       	movw	r26, r24
    122c:	cb 01       	movw	r24, r22
    122e:	8f 83       	std	Y+7, r24	; 0x07
    1230:	98 87       	std	Y+8, r25	; 0x08
    1232:	a9 87       	std	Y+9, r26	; 0x09
    1234:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1236:	6f 81       	ldd	r22, Y+7	; 0x07
    1238:	78 85       	ldd	r23, Y+8	; 0x08
    123a:	89 85       	ldd	r24, Y+9	; 0x09
    123c:	9a 85       	ldd	r25, Y+10	; 0x0a
    123e:	20 e0       	ldi	r18, 0x00	; 0
    1240:	30 e0       	ldi	r19, 0x00	; 0
    1242:	40 e8       	ldi	r20, 0x80	; 128
    1244:	5f e3       	ldi	r21, 0x3F	; 63
    1246:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    124a:	88 23       	and	r24, r24
    124c:	2c f4       	brge	.+10     	; 0x1258 <HLCD_WriteNum+0x9c>
		__ticks = 1;
    124e:	81 e0       	ldi	r24, 0x01	; 1
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	9e 83       	std	Y+6, r25	; 0x06
    1254:	8d 83       	std	Y+5, r24	; 0x05
    1256:	3f c0       	rjmp	.+126    	; 0x12d6 <HLCD_WriteNum+0x11a>
	else if (__tmp > 65535)
    1258:	6f 81       	ldd	r22, Y+7	; 0x07
    125a:	78 85       	ldd	r23, Y+8	; 0x08
    125c:	89 85       	ldd	r24, Y+9	; 0x09
    125e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1260:	20 e0       	ldi	r18, 0x00	; 0
    1262:	3f ef       	ldi	r19, 0xFF	; 255
    1264:	4f e7       	ldi	r20, 0x7F	; 127
    1266:	57 e4       	ldi	r21, 0x47	; 71
    1268:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    126c:	18 16       	cp	r1, r24
    126e:	4c f5       	brge	.+82     	; 0x12c2 <HLCD_WriteNum+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1270:	6b 85       	ldd	r22, Y+11	; 0x0b
    1272:	7c 85       	ldd	r23, Y+12	; 0x0c
    1274:	8d 85       	ldd	r24, Y+13	; 0x0d
    1276:	9e 85       	ldd	r25, Y+14	; 0x0e
    1278:	20 e0       	ldi	r18, 0x00	; 0
    127a:	30 e0       	ldi	r19, 0x00	; 0
    127c:	40 e2       	ldi	r20, 0x20	; 32
    127e:	51 e4       	ldi	r21, 0x41	; 65
    1280:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1284:	dc 01       	movw	r26, r24
    1286:	cb 01       	movw	r24, r22
    1288:	bc 01       	movw	r22, r24
    128a:	cd 01       	movw	r24, r26
    128c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1290:	dc 01       	movw	r26, r24
    1292:	cb 01       	movw	r24, r22
    1294:	9e 83       	std	Y+6, r25	; 0x06
    1296:	8d 83       	std	Y+5, r24	; 0x05
    1298:	0f c0       	rjmp	.+30     	; 0x12b8 <HLCD_WriteNum+0xfc>
    129a:	88 ec       	ldi	r24, 0xC8	; 200
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	9c 83       	std	Y+4, r25	; 0x04
    12a0:	8b 83       	std	Y+3, r24	; 0x03
    12a2:	8b 81       	ldd	r24, Y+3	; 0x03
    12a4:	9c 81       	ldd	r25, Y+4	; 0x04
    12a6:	01 97       	sbiw	r24, 0x01	; 1
    12a8:	f1 f7       	brne	.-4      	; 0x12a6 <HLCD_WriteNum+0xea>
    12aa:	9c 83       	std	Y+4, r25	; 0x04
    12ac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12ae:	8d 81       	ldd	r24, Y+5	; 0x05
    12b0:	9e 81       	ldd	r25, Y+6	; 0x06
    12b2:	01 97       	sbiw	r24, 0x01	; 1
    12b4:	9e 83       	std	Y+6, r25	; 0x06
    12b6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12b8:	8d 81       	ldd	r24, Y+5	; 0x05
    12ba:	9e 81       	ldd	r25, Y+6	; 0x06
    12bc:	00 97       	sbiw	r24, 0x00	; 0
    12be:	69 f7       	brne	.-38     	; 0x129a <HLCD_WriteNum+0xde>
    12c0:	14 c0       	rjmp	.+40     	; 0x12ea <HLCD_WriteNum+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12c2:	6f 81       	ldd	r22, Y+7	; 0x07
    12c4:	78 85       	ldd	r23, Y+8	; 0x08
    12c6:	89 85       	ldd	r24, Y+9	; 0x09
    12c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    12ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12ce:	dc 01       	movw	r26, r24
    12d0:	cb 01       	movw	r24, r22
    12d2:	9e 83       	std	Y+6, r25	; 0x06
    12d4:	8d 83       	std	Y+5, r24	; 0x05
    12d6:	8d 81       	ldd	r24, Y+5	; 0x05
    12d8:	9e 81       	ldd	r25, Y+6	; 0x06
    12da:	9a 83       	std	Y+2, r25	; 0x02
    12dc:	89 83       	std	Y+1, r24	; 0x01
    12de:	89 81       	ldd	r24, Y+1	; 0x01
    12e0:	9a 81       	ldd	r25, Y+2	; 0x02
    12e2:	01 97       	sbiw	r24, 0x01	; 1
    12e4:	f1 f7       	brne	.-4      	; 0x12e2 <HLCD_WriteNum+0x126>
    12e6:	9a 83       	std	Y+2, r25	; 0x02
    12e8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	ClearBit(PORTA, 2);
    12ea:	ab e3       	ldi	r26, 0x3B	; 59
    12ec:	b0 e0       	ldi	r27, 0x00	; 0
    12ee:	eb e3       	ldi	r30, 0x3B	; 59
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	80 81       	ld	r24, Z
    12f4:	8b 7f       	andi	r24, 0xFB	; 251
    12f6:	8c 93       	st	X, r24

}
    12f8:	2f 96       	adiw	r28, 0x0f	; 15
    12fa:	0f b6       	in	r0, 0x3f	; 63
    12fc:	f8 94       	cli
    12fe:	de bf       	out	0x3e, r29	; 62
    1300:	0f be       	out	0x3f, r0	; 63
    1302:	cd bf       	out	0x3d, r28	; 61
    1304:	cf 91       	pop	r28
    1306:	df 91       	pop	r29
    1308:	08 95       	ret

0000130a <HLCD_enuWriteNum>:
void HLCD_enuWriteNum(u16 u16datacpy) //Function to send num data
{
    130a:	df 93       	push	r29
    130c:	cf 93       	push	r28
    130e:	cd b7       	in	r28, 0x3d	; 61
    1310:	de b7       	in	r29, 0x3e	; 62
    1312:	29 97       	sbiw	r28, 0x09	; 9
    1314:	0f b6       	in	r0, 0x3f	; 63
    1316:	f8 94       	cli
    1318:	de bf       	out	0x3e, r29	; 62
    131a:	0f be       	out	0x3f, r0	; 63
    131c:	cd bf       	out	0x3d, r28	; 61
    131e:	99 87       	std	Y+9, r25	; 0x09
    1320:	88 87       	std	Y+8, r24	; 0x08
	u8 i = 0;
    1322:	1a 82       	std	Y+2, r1	; 0x02
	u8 num[5] = { 0 };
    1324:	85 e0       	ldi	r24, 0x05	; 5
    1326:	fe 01       	movw	r30, r28
    1328:	33 96       	adiw	r30, 0x03	; 3
    132a:	df 01       	movw	r26, r30
    132c:	98 2f       	mov	r25, r24
    132e:	1d 92       	st	X+, r1
    1330:	9a 95       	dec	r25
    1332:	e9 f7       	brne	.-6      	; 0x132e <HLCD_enuWriteNum+0x24>
    1334:	1d c0       	rjmp	.+58     	; 0x1370 <HLCD_enuWriteNum+0x66>
	s8 k;

	while (u16datacpy > 0) {
		num[i] = (u8) (u16datacpy % 10);
    1336:	8a 81       	ldd	r24, Y+2	; 0x02
    1338:	e8 2f       	mov	r30, r24
    133a:	f0 e0       	ldi	r31, 0x00	; 0
    133c:	88 85       	ldd	r24, Y+8	; 0x08
    133e:	99 85       	ldd	r25, Y+9	; 0x09
    1340:	2a e0       	ldi	r18, 0x0A	; 10
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	b9 01       	movw	r22, r18
    1346:	0e 94 a7 12 	call	0x254e	; 0x254e <__udivmodhi4>
    134a:	28 2f       	mov	r18, r24
    134c:	ce 01       	movw	r24, r28
    134e:	03 96       	adiw	r24, 0x03	; 3
    1350:	e8 0f       	add	r30, r24
    1352:	f9 1f       	adc	r31, r25
    1354:	20 83       	st	Z, r18
		u16datacpy /= 10;
    1356:	88 85       	ldd	r24, Y+8	; 0x08
    1358:	99 85       	ldd	r25, Y+9	; 0x09
    135a:	2a e0       	ldi	r18, 0x0A	; 10
    135c:	30 e0       	ldi	r19, 0x00	; 0
    135e:	b9 01       	movw	r22, r18
    1360:	0e 94 a7 12 	call	0x254e	; 0x254e <__udivmodhi4>
    1364:	cb 01       	movw	r24, r22
    1366:	99 87       	std	Y+9, r25	; 0x09
    1368:	88 87       	std	Y+8, r24	; 0x08

		i++;
    136a:	8a 81       	ldd	r24, Y+2	; 0x02
    136c:	8f 5f       	subi	r24, 0xFF	; 255
    136e:	8a 83       	std	Y+2, r24	; 0x02
{
	u8 i = 0;
	u8 num[5] = { 0 };
	s8 k;

	while (u16datacpy > 0) {
    1370:	88 85       	ldd	r24, Y+8	; 0x08
    1372:	99 85       	ldd	r25, Y+9	; 0x09
    1374:	00 97       	sbiw	r24, 0x00	; 0
    1376:	f9 f6       	brne	.-66     	; 0x1336 <HLCD_enuWriteNum+0x2c>
		num[i] = (u8) (u16datacpy % 10);
		u16datacpy /= 10;

		i++;
	}
	i--;
    1378:	8a 81       	ldd	r24, Y+2	; 0x02
    137a:	81 50       	subi	r24, 0x01	; 1
    137c:	8a 83       	std	Y+2, r24	; 0x02

	for (k = i; k >= 0; k--) {
    137e:	8a 81       	ldd	r24, Y+2	; 0x02
    1380:	89 83       	std	Y+1, r24	; 0x01
    1382:	10 c0       	rjmp	.+32     	; 0x13a4 <HLCD_enuWriteNum+0x9a>
		HLCD_WriteNum(num[k]);
    1384:	89 81       	ldd	r24, Y+1	; 0x01
    1386:	28 2f       	mov	r18, r24
    1388:	33 27       	eor	r19, r19
    138a:	27 fd       	sbrc	r18, 7
    138c:	30 95       	com	r19
    138e:	ce 01       	movw	r24, r28
    1390:	03 96       	adiw	r24, 0x03	; 3
    1392:	fc 01       	movw	r30, r24
    1394:	e2 0f       	add	r30, r18
    1396:	f3 1f       	adc	r31, r19
    1398:	80 81       	ld	r24, Z
    139a:	0e 94 de 08 	call	0x11bc	; 0x11bc <HLCD_WriteNum>

		i++;
	}
	i--;

	for (k = i; k >= 0; k--) {
    139e:	89 81       	ldd	r24, Y+1	; 0x01
    13a0:	81 50       	subi	r24, 0x01	; 1
    13a2:	89 83       	std	Y+1, r24	; 0x01
    13a4:	89 81       	ldd	r24, Y+1	; 0x01
    13a6:	88 23       	and	r24, r24
    13a8:	6c f7       	brge	.-38     	; 0x1384 <HLCD_enuWriteNum+0x7a>
		HLCD_WriteNum(num[k]);

	}

}
    13aa:	29 96       	adiw	r28, 0x09	; 9
    13ac:	0f b6       	in	r0, 0x3f	; 63
    13ae:	f8 94       	cli
    13b0:	de bf       	out	0x3e, r29	; 62
    13b2:	0f be       	out	0x3f, r0	; 63
    13b4:	cd bf       	out	0x3d, r28	; 61
    13b6:	cf 91       	pop	r28
    13b8:	df 91       	pop	r29
    13ba:	08 95       	ret

000013bc <HLCD_WriteString>:

void HLCD_WriteString(char* pu8str) // Function to send data to string
{
    13bc:	df 93       	push	r29
    13be:	cf 93       	push	r28
    13c0:	cd b7       	in	r28, 0x3d	; 61
    13c2:	de b7       	in	r29, 0x3e	; 62
    13c4:	62 97       	sbiw	r28, 0x12	; 18
    13c6:	0f b6       	in	r0, 0x3f	; 63
    13c8:	f8 94       	cli
    13ca:	de bf       	out	0x3e, r29	; 62
    13cc:	0f be       	out	0x3f, r0	; 63
    13ce:	cd bf       	out	0x3d, r28	; 61
    13d0:	9a 8b       	std	Y+18, r25	; 0x12
    13d2:	89 8b       	std	Y+17, r24	; 0x11
	int i = 0;
    13d4:	18 8a       	std	Y+16, r1	; 0x10
    13d6:	1f 86       	std	Y+15, r1	; 0x0f
    13d8:	81 c0       	rjmp	.+258    	; 0x14dc <HLCD_WriteString+0x120>
	while (pu8str[i] != '\0') {
		HLCD_WriteData(pu8str[i]);
    13da:	2f 85       	ldd	r18, Y+15	; 0x0f
    13dc:	38 89       	ldd	r19, Y+16	; 0x10
    13de:	89 89       	ldd	r24, Y+17	; 0x11
    13e0:	9a 89       	ldd	r25, Y+18	; 0x12
    13e2:	fc 01       	movw	r30, r24
    13e4:	e2 0f       	add	r30, r18
    13e6:	f3 1f       	adc	r31, r19
    13e8:	80 81       	ld	r24, Z
    13ea:	0e 94 38 08 	call	0x1070	; 0x1070 <HLCD_WriteData>
		i++;
    13ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    13f0:	98 89       	ldd	r25, Y+16	; 0x10
    13f2:	01 96       	adiw	r24, 0x01	; 1
    13f4:	98 8b       	std	Y+16, r25	; 0x10
    13f6:	8f 87       	std	Y+15, r24	; 0x0f
    13f8:	80 e0       	ldi	r24, 0x00	; 0
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	a0 e2       	ldi	r26, 0x20	; 32
    13fe:	b1 e4       	ldi	r27, 0x41	; 65
    1400:	8b 87       	std	Y+11, r24	; 0x0b
    1402:	9c 87       	std	Y+12, r25	; 0x0c
    1404:	ad 87       	std	Y+13, r26	; 0x0d
    1406:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1408:	6b 85       	ldd	r22, Y+11	; 0x0b
    140a:	7c 85       	ldd	r23, Y+12	; 0x0c
    140c:	8d 85       	ldd	r24, Y+13	; 0x0d
    140e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1410:	20 e0       	ldi	r18, 0x00	; 0
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	4a ef       	ldi	r20, 0xFA	; 250
    1416:	54 e4       	ldi	r21, 0x44	; 68
    1418:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    141c:	dc 01       	movw	r26, r24
    141e:	cb 01       	movw	r24, r22
    1420:	8f 83       	std	Y+7, r24	; 0x07
    1422:	98 87       	std	Y+8, r25	; 0x08
    1424:	a9 87       	std	Y+9, r26	; 0x09
    1426:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1428:	6f 81       	ldd	r22, Y+7	; 0x07
    142a:	78 85       	ldd	r23, Y+8	; 0x08
    142c:	89 85       	ldd	r24, Y+9	; 0x09
    142e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1430:	20 e0       	ldi	r18, 0x00	; 0
    1432:	30 e0       	ldi	r19, 0x00	; 0
    1434:	40 e8       	ldi	r20, 0x80	; 128
    1436:	5f e3       	ldi	r21, 0x3F	; 63
    1438:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    143c:	88 23       	and	r24, r24
    143e:	2c f4       	brge	.+10     	; 0x144a <HLCD_WriteString+0x8e>
		__ticks = 1;
    1440:	81 e0       	ldi	r24, 0x01	; 1
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	9e 83       	std	Y+6, r25	; 0x06
    1446:	8d 83       	std	Y+5, r24	; 0x05
    1448:	3f c0       	rjmp	.+126    	; 0x14c8 <HLCD_WriteString+0x10c>
	else if (__tmp > 65535)
    144a:	6f 81       	ldd	r22, Y+7	; 0x07
    144c:	78 85       	ldd	r23, Y+8	; 0x08
    144e:	89 85       	ldd	r24, Y+9	; 0x09
    1450:	9a 85       	ldd	r25, Y+10	; 0x0a
    1452:	20 e0       	ldi	r18, 0x00	; 0
    1454:	3f ef       	ldi	r19, 0xFF	; 255
    1456:	4f e7       	ldi	r20, 0x7F	; 127
    1458:	57 e4       	ldi	r21, 0x47	; 71
    145a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    145e:	18 16       	cp	r1, r24
    1460:	4c f5       	brge	.+82     	; 0x14b4 <HLCD_WriteString+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1462:	6b 85       	ldd	r22, Y+11	; 0x0b
    1464:	7c 85       	ldd	r23, Y+12	; 0x0c
    1466:	8d 85       	ldd	r24, Y+13	; 0x0d
    1468:	9e 85       	ldd	r25, Y+14	; 0x0e
    146a:	20 e0       	ldi	r18, 0x00	; 0
    146c:	30 e0       	ldi	r19, 0x00	; 0
    146e:	40 e2       	ldi	r20, 0x20	; 32
    1470:	51 e4       	ldi	r21, 0x41	; 65
    1472:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1476:	dc 01       	movw	r26, r24
    1478:	cb 01       	movw	r24, r22
    147a:	bc 01       	movw	r22, r24
    147c:	cd 01       	movw	r24, r26
    147e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1482:	dc 01       	movw	r26, r24
    1484:	cb 01       	movw	r24, r22
    1486:	9e 83       	std	Y+6, r25	; 0x06
    1488:	8d 83       	std	Y+5, r24	; 0x05
    148a:	0f c0       	rjmp	.+30     	; 0x14aa <HLCD_WriteString+0xee>
    148c:	88 ec       	ldi	r24, 0xC8	; 200
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	9c 83       	std	Y+4, r25	; 0x04
    1492:	8b 83       	std	Y+3, r24	; 0x03
    1494:	8b 81       	ldd	r24, Y+3	; 0x03
    1496:	9c 81       	ldd	r25, Y+4	; 0x04
    1498:	01 97       	sbiw	r24, 0x01	; 1
    149a:	f1 f7       	brne	.-4      	; 0x1498 <HLCD_WriteString+0xdc>
    149c:	9c 83       	std	Y+4, r25	; 0x04
    149e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14a0:	8d 81       	ldd	r24, Y+5	; 0x05
    14a2:	9e 81       	ldd	r25, Y+6	; 0x06
    14a4:	01 97       	sbiw	r24, 0x01	; 1
    14a6:	9e 83       	std	Y+6, r25	; 0x06
    14a8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14aa:	8d 81       	ldd	r24, Y+5	; 0x05
    14ac:	9e 81       	ldd	r25, Y+6	; 0x06
    14ae:	00 97       	sbiw	r24, 0x00	; 0
    14b0:	69 f7       	brne	.-38     	; 0x148c <HLCD_WriteString+0xd0>
    14b2:	14 c0       	rjmp	.+40     	; 0x14dc <HLCD_WriteString+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14b4:	6f 81       	ldd	r22, Y+7	; 0x07
    14b6:	78 85       	ldd	r23, Y+8	; 0x08
    14b8:	89 85       	ldd	r24, Y+9	; 0x09
    14ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    14bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14c0:	dc 01       	movw	r26, r24
    14c2:	cb 01       	movw	r24, r22
    14c4:	9e 83       	std	Y+6, r25	; 0x06
    14c6:	8d 83       	std	Y+5, r24	; 0x05
    14c8:	8d 81       	ldd	r24, Y+5	; 0x05
    14ca:	9e 81       	ldd	r25, Y+6	; 0x06
    14cc:	9a 83       	std	Y+2, r25	; 0x02
    14ce:	89 83       	std	Y+1, r24	; 0x01
    14d0:	89 81       	ldd	r24, Y+1	; 0x01
    14d2:	9a 81       	ldd	r25, Y+2	; 0x02
    14d4:	01 97       	sbiw	r24, 0x01	; 1
    14d6:	f1 f7       	brne	.-4      	; 0x14d4 <HLCD_WriteString+0x118>
    14d8:	9a 83       	std	Y+2, r25	; 0x02
    14da:	89 83       	std	Y+1, r24	; 0x01
}

void HLCD_WriteString(char* pu8str) // Function to send data to string
{
	int i = 0;
	while (pu8str[i] != '\0') {
    14dc:	2f 85       	ldd	r18, Y+15	; 0x0f
    14de:	38 89       	ldd	r19, Y+16	; 0x10
    14e0:	89 89       	ldd	r24, Y+17	; 0x11
    14e2:	9a 89       	ldd	r25, Y+18	; 0x12
    14e4:	fc 01       	movw	r30, r24
    14e6:	e2 0f       	add	r30, r18
    14e8:	f3 1f       	adc	r31, r19
    14ea:	80 81       	ld	r24, Z
    14ec:	88 23       	and	r24, r24
    14ee:	09 f0       	breq	.+2      	; 0x14f2 <HLCD_WriteString+0x136>
    14f0:	74 cf       	rjmp	.-280    	; 0x13da <HLCD_WriteString+0x1e>
		HLCD_WriteData(pu8str[i]);
		i++;
		_delay_ms(10);
	}
}
    14f2:	62 96       	adiw	r28, 0x12	; 18
    14f4:	0f b6       	in	r0, 0x3f	; 63
    14f6:	f8 94       	cli
    14f8:	de bf       	out	0x3e, r29	; 62
    14fa:	0f be       	out	0x3f, r0	; 63
    14fc:	cd bf       	out	0x3d, r28	; 61
    14fe:	cf 91       	pop	r28
    1500:	df 91       	pop	r29
    1502:	08 95       	ret

00001504 <HLCD_GoToXY>:

void HLCD_GoToXY(u8 row, u8 col) {
    1504:	df 93       	push	r29
    1506:	cf 93       	push	r28
    1508:	00 d0       	rcall	.+0      	; 0x150a <HLCD_GoToXY+0x6>
    150a:	00 d0       	rcall	.+0      	; 0x150c <HLCD_GoToXY+0x8>
    150c:	cd b7       	in	r28, 0x3d	; 61
    150e:	de b7       	in	r29, 0x3e	; 62
    1510:	89 83       	std	Y+1, r24	; 0x01
    1512:	6a 83       	std	Y+2, r22	; 0x02
	switch (row) {
    1514:	89 81       	ldd	r24, Y+1	; 0x01
    1516:	28 2f       	mov	r18, r24
    1518:	30 e0       	ldi	r19, 0x00	; 0
    151a:	3c 83       	std	Y+4, r19	; 0x04
    151c:	2b 83       	std	Y+3, r18	; 0x03
    151e:	8b 81       	ldd	r24, Y+3	; 0x03
    1520:	9c 81       	ldd	r25, Y+4	; 0x04
    1522:	00 97       	sbiw	r24, 0x00	; 0
    1524:	31 f0       	breq	.+12     	; 0x1532 <HLCD_GoToXY+0x2e>
    1526:	2b 81       	ldd	r18, Y+3	; 0x03
    1528:	3c 81       	ldd	r19, Y+4	; 0x04
    152a:	21 30       	cpi	r18, 0x01	; 1
    152c:	31 05       	cpc	r19, r1
    152e:	31 f0       	breq	.+12     	; 0x153c <HLCD_GoToXY+0x38>
    1530:	09 c0       	rjmp	.+18     	; 0x1544 <HLCD_GoToXY+0x40>
	case 0:
		HLCD_WriteCmd(0b10000000 + col);
    1532:	8a 81       	ldd	r24, Y+2	; 0x02
    1534:	80 58       	subi	r24, 0x80	; 128
    1536:	0e 94 92 07 	call	0xf24	; 0xf24 <HLCD_WriteCmd>
    153a:	04 c0       	rjmp	.+8      	; 0x1544 <HLCD_GoToXY+0x40>
		break;
	case 1:
		HLCD_WriteCmd(0b11000000 + col);
    153c:	8a 81       	ldd	r24, Y+2	; 0x02
    153e:	80 54       	subi	r24, 0x40	; 64
    1540:	0e 94 92 07 	call	0xf24	; 0xf24 <HLCD_WriteCmd>
		break;

	}

}
    1544:	0f 90       	pop	r0
    1546:	0f 90       	pop	r0
    1548:	0f 90       	pop	r0
    154a:	0f 90       	pop	r0
    154c:	cf 91       	pop	r28
    154e:	df 91       	pop	r29
    1550:	08 95       	ret

00001552 <HKPAD_Init>:

#include "../CSWC_PLT_MCU_ATMEGA32/MDIO/MDIO_Int.h"

#include "HKPAD_Interface.h"

void HKPAD_Init() {
    1552:	df 93       	push	r29
    1554:	cf 93       	push	r28
    1556:	cd b7       	in	r28, 0x3d	; 61
    1558:	de b7       	in	r29, 0x3e	; 62
	DDRD = 0xF0;
    155a:	e1 e3       	ldi	r30, 0x31	; 49
    155c:	f0 e0       	ldi	r31, 0x00	; 0
    155e:	80 ef       	ldi	r24, 0xF0	; 240
    1560:	80 83       	st	Z, r24
	PORTD = 0xFF;
    1562:	e2 e3       	ldi	r30, 0x32	; 50
    1564:	f0 e0       	ldi	r31, 0x00	; 0
    1566:	8f ef       	ldi	r24, 0xFF	; 255
    1568:	80 83       	st	Z, r24
}
    156a:	cf 91       	pop	r28
    156c:	df 91       	pop	r29
    156e:	08 95       	ret

00001570 <HKPAD_GetKeyValue>:
char HKPAD_GetKeyValue(pu8 HKPAD_SW_NO) {
    1570:	df 93       	push	r29
    1572:	cf 93       	push	r28
    1574:	cd b7       	in	r28, 0x3d	; 61
    1576:	de b7       	in	r29, 0x3e	; 62
    1578:	64 97       	sbiw	r28, 0x14	; 20
    157a:	0f b6       	in	r0, 0x3f	; 63
    157c:	f8 94       	cli
    157e:	de bf       	out	0x3e, r29	; 62
    1580:	0f be       	out	0x3f, r0	; 63
    1582:	cd bf       	out	0x3d, r28	; 61
    1584:	9c 8b       	std	Y+20, r25	; 0x14
    1586:	8b 8b       	std	Y+19, r24	; 0x13
	u8 col, row;
	u8 rowno;
	u8 flag = 0;
    1588:	1f 86       	std	Y+15, r1	; 0x0f
	for (col = 4; col <= 7; col++) {
    158a:	84 e0       	ldi	r24, 0x04	; 4
    158c:	89 8b       	std	Y+17, r24	; 0x11
    158e:	44 c0       	rjmp	.+136    	; 0x1618 <HKPAD_GetKeyValue+0xa8>
		MDIO_enuSetPinValue(MDIO_PORTD, col, 0);
    1590:	83 e0       	ldi	r24, 0x03	; 3
    1592:	69 89       	ldd	r22, Y+17	; 0x11
    1594:	40 e0       	ldi	r20, 0x00	; 0
    1596:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <MDIO_enuSetPinValue>

		for (row = 0; row <= 3; row++) {
    159a:	18 8a       	std	Y+16, r1	; 0x10
    159c:	32 c0       	rjmp	.+100    	; 0x1602 <HKPAD_GetKeyValue+0x92>
			MDIO_enuGetPinValue(MDIO_PORTD, row, &rowno);
    159e:	9e 01       	movw	r18, r28
    15a0:	2e 5e       	subi	r18, 0xEE	; 238
    15a2:	3f 4f       	sbci	r19, 0xFF	; 255
    15a4:	83 e0       	ldi	r24, 0x03	; 3
    15a6:	68 89       	ldd	r22, Y+16	; 0x10
    15a8:	a9 01       	movw	r20, r18
    15aa:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <MDIO_enuGetPinValue>
			if(rowno == 0)
    15ae:	8a 89       	ldd	r24, Y+18	; 0x12
    15b0:	88 23       	and	r24, r24
    15b2:	21 f5       	brne	.+72     	; 0x15fc <HKPAD_GetKeyValue+0x8c>
    15b4:	10 c0       	rjmp	.+32     	; 0x15d6 <HKPAD_GetKeyValue+0x66>

			{   while(GetBit(PIND,row)==0)
			{
				*HKPAD_SW_NO = (row * 4) + (col - 4);
    15b6:	88 89       	ldd	r24, Y+16	; 0x10
    15b8:	88 2f       	mov	r24, r24
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	88 0f       	add	r24, r24
    15be:	99 1f       	adc	r25, r25
    15c0:	88 0f       	add	r24, r24
    15c2:	99 1f       	adc	r25, r25
    15c4:	98 2f       	mov	r25, r24
    15c6:	89 89       	ldd	r24, Y+17	; 0x11
    15c8:	89 0f       	add	r24, r25
    15ca:	84 50       	subi	r24, 0x04	; 4
    15cc:	eb 89       	ldd	r30, Y+19	; 0x13
    15ce:	fc 89       	ldd	r31, Y+20	; 0x14
    15d0:	80 83       	st	Z, r24
				flag = 1;
    15d2:	81 e0       	ldi	r24, 0x01	; 1
    15d4:	8f 87       	std	Y+15, r24	; 0x0f

		for (row = 0; row <= 3; row++) {
			MDIO_enuGetPinValue(MDIO_PORTD, row, &rowno);
			if(rowno == 0)

			{   while(GetBit(PIND,row)==0)
    15d6:	e0 e3       	ldi	r30, 0x30	; 48
    15d8:	f0 e0       	ldi	r31, 0x00	; 0
    15da:	80 81       	ld	r24, Z
    15dc:	28 2f       	mov	r18, r24
    15de:	30 e0       	ldi	r19, 0x00	; 0
    15e0:	88 89       	ldd	r24, Y+16	; 0x10
    15e2:	88 2f       	mov	r24, r24
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	a9 01       	movw	r20, r18
    15e8:	02 c0       	rjmp	.+4      	; 0x15ee <HKPAD_GetKeyValue+0x7e>
    15ea:	55 95       	asr	r21
    15ec:	47 95       	ror	r20
    15ee:	8a 95       	dec	r24
    15f0:	e2 f7       	brpl	.-8      	; 0x15ea <HKPAD_GetKeyValue+0x7a>
    15f2:	ca 01       	movw	r24, r20
    15f4:	81 70       	andi	r24, 0x01	; 1
    15f6:	90 70       	andi	r25, 0x00	; 0
    15f8:	00 97       	sbiw	r24, 0x00	; 0
    15fa:	e9 f2       	breq	.-70     	; 0x15b6 <HKPAD_GetKeyValue+0x46>
	u8 rowno;
	u8 flag = 0;
	for (col = 4; col <= 7; col++) {
		MDIO_enuSetPinValue(MDIO_PORTD, col, 0);

		for (row = 0; row <= 3; row++) {
    15fc:	88 89       	ldd	r24, Y+16	; 0x10
    15fe:	8f 5f       	subi	r24, 0xFF	; 255
    1600:	88 8b       	std	Y+16, r24	; 0x10
    1602:	88 89       	ldd	r24, Y+16	; 0x10
    1604:	84 30       	cpi	r24, 0x04	; 4
    1606:	58 f2       	brcs	.-106    	; 0x159e <HKPAD_GetKeyValue+0x2e>
			}

			}

		}
		MDIO_enuSetPinValue(MDIO_PORTD, col, 1);
    1608:	83 e0       	ldi	r24, 0x03	; 3
    160a:	69 89       	ldd	r22, Y+17	; 0x11
    160c:	41 e0       	ldi	r20, 0x01	; 1
    160e:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <MDIO_enuSetPinValue>
}
char HKPAD_GetKeyValue(pu8 HKPAD_SW_NO) {
	u8 col, row;
	u8 rowno;
	u8 flag = 0;
	for (col = 4; col <= 7; col++) {
    1612:	89 89       	ldd	r24, Y+17	; 0x11
    1614:	8f 5f       	subi	r24, 0xFF	; 255
    1616:	89 8b       	std	Y+17, r24	; 0x11
    1618:	89 89       	ldd	r24, Y+17	; 0x11
    161a:	88 30       	cpi	r24, 0x08	; 8
    161c:	08 f4       	brcc	.+2      	; 0x1620 <HKPAD_GetKeyValue+0xb0>
    161e:	b8 cf       	rjmp	.-144    	; 0x1590 <HKPAD_GetKeyValue+0x20>
    1620:	80 e0       	ldi	r24, 0x00	; 0
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	a0 ea       	ldi	r26, 0xA0	; 160
    1626:	b1 e4       	ldi	r27, 0x41	; 65
    1628:	8b 87       	std	Y+11, r24	; 0x0b
    162a:	9c 87       	std	Y+12, r25	; 0x0c
    162c:	ad 87       	std	Y+13, r26	; 0x0d
    162e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1630:	6b 85       	ldd	r22, Y+11	; 0x0b
    1632:	7c 85       	ldd	r23, Y+12	; 0x0c
    1634:	8d 85       	ldd	r24, Y+13	; 0x0d
    1636:	9e 85       	ldd	r25, Y+14	; 0x0e
    1638:	20 e0       	ldi	r18, 0x00	; 0
    163a:	30 e0       	ldi	r19, 0x00	; 0
    163c:	4a ef       	ldi	r20, 0xFA	; 250
    163e:	54 e4       	ldi	r21, 0x44	; 68
    1640:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1644:	dc 01       	movw	r26, r24
    1646:	cb 01       	movw	r24, r22
    1648:	8f 83       	std	Y+7, r24	; 0x07
    164a:	98 87       	std	Y+8, r25	; 0x08
    164c:	a9 87       	std	Y+9, r26	; 0x09
    164e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1650:	6f 81       	ldd	r22, Y+7	; 0x07
    1652:	78 85       	ldd	r23, Y+8	; 0x08
    1654:	89 85       	ldd	r24, Y+9	; 0x09
    1656:	9a 85       	ldd	r25, Y+10	; 0x0a
    1658:	20 e0       	ldi	r18, 0x00	; 0
    165a:	30 e0       	ldi	r19, 0x00	; 0
    165c:	40 e8       	ldi	r20, 0x80	; 128
    165e:	5f e3       	ldi	r21, 0x3F	; 63
    1660:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1664:	88 23       	and	r24, r24
    1666:	2c f4       	brge	.+10     	; 0x1672 <HKPAD_GetKeyValue+0x102>
		__ticks = 1;
    1668:	81 e0       	ldi	r24, 0x01	; 1
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	9e 83       	std	Y+6, r25	; 0x06
    166e:	8d 83       	std	Y+5, r24	; 0x05
    1670:	3f c0       	rjmp	.+126    	; 0x16f0 <HKPAD_GetKeyValue+0x180>
	else if (__tmp > 65535)
    1672:	6f 81       	ldd	r22, Y+7	; 0x07
    1674:	78 85       	ldd	r23, Y+8	; 0x08
    1676:	89 85       	ldd	r24, Y+9	; 0x09
    1678:	9a 85       	ldd	r25, Y+10	; 0x0a
    167a:	20 e0       	ldi	r18, 0x00	; 0
    167c:	3f ef       	ldi	r19, 0xFF	; 255
    167e:	4f e7       	ldi	r20, 0x7F	; 127
    1680:	57 e4       	ldi	r21, 0x47	; 71
    1682:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1686:	18 16       	cp	r1, r24
    1688:	4c f5       	brge	.+82     	; 0x16dc <HKPAD_GetKeyValue+0x16c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    168a:	6b 85       	ldd	r22, Y+11	; 0x0b
    168c:	7c 85       	ldd	r23, Y+12	; 0x0c
    168e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1690:	9e 85       	ldd	r25, Y+14	; 0x0e
    1692:	20 e0       	ldi	r18, 0x00	; 0
    1694:	30 e0       	ldi	r19, 0x00	; 0
    1696:	40 e2       	ldi	r20, 0x20	; 32
    1698:	51 e4       	ldi	r21, 0x41	; 65
    169a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    169e:	dc 01       	movw	r26, r24
    16a0:	cb 01       	movw	r24, r22
    16a2:	bc 01       	movw	r22, r24
    16a4:	cd 01       	movw	r24, r26
    16a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16aa:	dc 01       	movw	r26, r24
    16ac:	cb 01       	movw	r24, r22
    16ae:	9e 83       	std	Y+6, r25	; 0x06
    16b0:	8d 83       	std	Y+5, r24	; 0x05
    16b2:	0f c0       	rjmp	.+30     	; 0x16d2 <HKPAD_GetKeyValue+0x162>
    16b4:	88 ec       	ldi	r24, 0xC8	; 200
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	9c 83       	std	Y+4, r25	; 0x04
    16ba:	8b 83       	std	Y+3, r24	; 0x03
    16bc:	8b 81       	ldd	r24, Y+3	; 0x03
    16be:	9c 81       	ldd	r25, Y+4	; 0x04
    16c0:	01 97       	sbiw	r24, 0x01	; 1
    16c2:	f1 f7       	brne	.-4      	; 0x16c0 <HKPAD_GetKeyValue+0x150>
    16c4:	9c 83       	std	Y+4, r25	; 0x04
    16c6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16c8:	8d 81       	ldd	r24, Y+5	; 0x05
    16ca:	9e 81       	ldd	r25, Y+6	; 0x06
    16cc:	01 97       	sbiw	r24, 0x01	; 1
    16ce:	9e 83       	std	Y+6, r25	; 0x06
    16d0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16d2:	8d 81       	ldd	r24, Y+5	; 0x05
    16d4:	9e 81       	ldd	r25, Y+6	; 0x06
    16d6:	00 97       	sbiw	r24, 0x00	; 0
    16d8:	69 f7       	brne	.-38     	; 0x16b4 <HKPAD_GetKeyValue+0x144>
    16da:	14 c0       	rjmp	.+40     	; 0x1704 <HKPAD_GetKeyValue+0x194>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16dc:	6f 81       	ldd	r22, Y+7	; 0x07
    16de:	78 85       	ldd	r23, Y+8	; 0x08
    16e0:	89 85       	ldd	r24, Y+9	; 0x09
    16e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    16e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16e8:	dc 01       	movw	r26, r24
    16ea:	cb 01       	movw	r24, r22
    16ec:	9e 83       	std	Y+6, r25	; 0x06
    16ee:	8d 83       	std	Y+5, r24	; 0x05
    16f0:	8d 81       	ldd	r24, Y+5	; 0x05
    16f2:	9e 81       	ldd	r25, Y+6	; 0x06
    16f4:	9a 83       	std	Y+2, r25	; 0x02
    16f6:	89 83       	std	Y+1, r24	; 0x01
    16f8:	89 81       	ldd	r24, Y+1	; 0x01
    16fa:	9a 81       	ldd	r25, Y+2	; 0x02
    16fc:	01 97       	sbiw	r24, 0x01	; 1
    16fe:	f1 f7       	brne	.-4      	; 0x16fc <HKPAD_GetKeyValue+0x18c>
    1700:	9a 83       	std	Y+2, r25	; 0x02
    1702:	89 83       	std	Y+1, r24	; 0x01

		}
		MDIO_enuSetPinValue(MDIO_PORTD, col, 1);
	}
	_delay_ms(20);
	return flag;
    1704:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    1706:	64 96       	adiw	r28, 0x14	; 20
    1708:	0f b6       	in	r0, 0x3f	; 63
    170a:	f8 94       	cli
    170c:	de bf       	out	0x3e, r29	; 62
    170e:	0f be       	out	0x3f, r0	; 63
    1710:	cd bf       	out	0x3d, r28	; 61
    1712:	cf 91       	pop	r28
    1714:	df 91       	pop	r29
    1716:	08 95       	ret

00001718 <MINT_NewState>:
void __vector_3(void)   __attribute__((signal,used));



void MINT_NewState(MINT_Config config)
{
    1718:	df 93       	push	r29
    171a:	cf 93       	push	r28
    171c:	00 d0       	rcall	.+0      	; 0x171e <MINT_NewState+0x6>
    171e:	0f 92       	push	r0
    1720:	cd b7       	in	r28, 0x3d	; 61
    1722:	de b7       	in	r29, 0x3e	; 62
    1724:	69 83       	std	Y+1, r22	; 0x01
    1726:	7a 83       	std	Y+2, r23	; 0x02
    1728:	8b 83       	std	Y+3, r24	; 0x03
if(config.INT_NO==MINT_INT0)
    172a:	89 81       	ldd	r24, Y+1	; 0x01
    172c:	81 30       	cpi	r24, 0x01	; 1
    172e:	19 f5       	brne	.+70     	; 0x1776 <MINT_NewState+0x5e>
{
if((config.INT_STATE==MINT_ON)&&(config.INT_MODE==MINT_RISINGEDGE))
    1730:	8a 81       	ldd	r24, Y+2	; 0x02
    1732:	81 30       	cpi	r24, 0x01	; 1
    1734:	31 f4       	brne	.+12     	; 0x1742 <MINT_NewState+0x2a>
    1736:	8b 81       	ldd	r24, Y+3	; 0x03
    1738:	81 30       	cpi	r24, 0x01	; 1
    173a:	19 f4       	brne	.+6      	; 0x1742 <MINT_NewState+0x2a>
{ MINT_0_RAISINGGEDGE();
    173c:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <MINT_0_RAISINGGEDGE>
    1740:	5c c0       	rjmp	.+184    	; 0x17fa <MINT_NewState+0xe2>
	}
else if ((config.INT_STATE==MINT_ON)&&(config.INT_MODE==MINT_FALLINGEDGE))
    1742:	8a 81       	ldd	r24, Y+2	; 0x02
    1744:	81 30       	cpi	r24, 0x01	; 1
    1746:	31 f4       	brne	.+12     	; 0x1754 <MINT_NewState+0x3c>
    1748:	8b 81       	ldd	r24, Y+3	; 0x03
    174a:	82 30       	cpi	r24, 0x02	; 2
    174c:	19 f4       	brne	.+6      	; 0x1754 <MINT_NewState+0x3c>
{
	 MINT_0_FALLINGEDGE();
    174e:	0e 94 df 0c 	call	0x19be	; 0x19be <MINT_0_FALLINGEDGE>
    1752:	53 c0       	rjmp	.+166    	; 0x17fa <MINT_NewState+0xe2>
}
else if ((config.INT_STATE==MINT_ON)&&(config.INT_MODE==MINT_LOGICALEDGE))
    1754:	8a 81       	ldd	r24, Y+2	; 0x02
    1756:	81 30       	cpi	r24, 0x01	; 1
    1758:	31 f4       	brne	.+12     	; 0x1766 <MINT_NewState+0x4e>
    175a:	8b 81       	ldd	r24, Y+3	; 0x03
    175c:	83 30       	cpi	r24, 0x03	; 3
    175e:	19 f4       	brne	.+6      	; 0x1766 <MINT_NewState+0x4e>
{
	MINT_0_LOGICALEDGE();
    1760:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <MINT_0_LOGICALEDGE>
    1764:	4a c0       	rjmp	.+148    	; 0x17fa <MINT_NewState+0xe2>
}
else
 {
	ClearBit(GICR,6);
    1766:	ab e5       	ldi	r26, 0x5B	; 91
    1768:	b0 e0       	ldi	r27, 0x00	; 0
    176a:	eb e5       	ldi	r30, 0x5B	; 91
    176c:	f0 e0       	ldi	r31, 0x00	; 0
    176e:	80 81       	ld	r24, Z
    1770:	8f 7b       	andi	r24, 0xBF	; 191
    1772:	8c 93       	st	X, r24
    1774:	42 c0       	rjmp	.+132    	; 0x17fa <MINT_NewState+0xe2>
 }
}
else if (config.INT_NO==MINT_INT1)
    1776:	89 81       	ldd	r24, Y+1	; 0x01
    1778:	82 30       	cpi	r24, 0x02	; 2
    177a:	19 f5       	brne	.+70     	; 0x17c2 <MINT_NewState+0xaa>
{

	if((config.INT_STATE==MINT_ON)&&(config.INT_MODE==MINT_RISINGEDGE))
    177c:	8a 81       	ldd	r24, Y+2	; 0x02
    177e:	81 30       	cpi	r24, 0x01	; 1
    1780:	31 f4       	brne	.+12     	; 0x178e <MINT_NewState+0x76>
    1782:	8b 81       	ldd	r24, Y+3	; 0x03
    1784:	81 30       	cpi	r24, 0x01	; 1
    1786:	19 f4       	brne	.+6      	; 0x178e <MINT_NewState+0x76>
	{ MINT_1_RAISINGEDGE();
    1788:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <MINT_1_RAISINGEDGE>
    178c:	36 c0       	rjmp	.+108    	; 0x17fa <MINT_NewState+0xe2>
		}
	else if ((config.INT_STATE==MINT_ON)&&(config.INT_MODE==MINT_FALLINGEDGE))
    178e:	8a 81       	ldd	r24, Y+2	; 0x02
    1790:	81 30       	cpi	r24, 0x01	; 1
    1792:	31 f4       	brne	.+12     	; 0x17a0 <MINT_NewState+0x88>
    1794:	8b 81       	ldd	r24, Y+3	; 0x03
    1796:	82 30       	cpi	r24, 0x02	; 2
    1798:	19 f4       	brne	.+6      	; 0x17a0 <MINT_NewState+0x88>
	{
		 MINT_1_FALLINGEDGE();
    179a:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <MINT_1_FALLINGEDGE>
    179e:	2d c0       	rjmp	.+90     	; 0x17fa <MINT_NewState+0xe2>
	}
	else if ((config.INT_STATE==MINT_ON)&&(config.INT_MODE==MINT_LOGICALEDGE))
    17a0:	8a 81       	ldd	r24, Y+2	; 0x02
    17a2:	81 30       	cpi	r24, 0x01	; 1
    17a4:	31 f4       	brne	.+12     	; 0x17b2 <MINT_NewState+0x9a>
    17a6:	8b 81       	ldd	r24, Y+3	; 0x03
    17a8:	83 30       	cpi	r24, 0x03	; 3
    17aa:	19 f4       	brne	.+6      	; 0x17b2 <MINT_NewState+0x9a>
	{
		MINT_1_LOGICALEDGE();
    17ac:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <MINT_1_LOGICALEDGE>
    17b0:	24 c0       	rjmp	.+72     	; 0x17fa <MINT_NewState+0xe2>
	}
	else
	 {
		ClearBit(GICR,7);
    17b2:	ab e5       	ldi	r26, 0x5B	; 91
    17b4:	b0 e0       	ldi	r27, 0x00	; 0
    17b6:	eb e5       	ldi	r30, 0x5B	; 91
    17b8:	f0 e0       	ldi	r31, 0x00	; 0
    17ba:	80 81       	ld	r24, Z
    17bc:	8f 77       	andi	r24, 0x7F	; 127
    17be:	8c 93       	st	X, r24
    17c0:	1c c0       	rjmp	.+56     	; 0x17fa <MINT_NewState+0xe2>
	 }


}
else if (config.INT_NO==MINT_INT2)
    17c2:	89 81       	ldd	r24, Y+1	; 0x01
    17c4:	83 30       	cpi	r24, 0x03	; 3
    17c6:	c9 f4       	brne	.+50     	; 0x17fa <MINT_NewState+0xe2>

{

		if((config.INT_STATE==MINT_ON)&&(config.INT_MODE==MINT_RISINGEDGE))
    17c8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ca:	81 30       	cpi	r24, 0x01	; 1
    17cc:	31 f4       	brne	.+12     	; 0x17da <MINT_NewState+0xc2>
    17ce:	8b 81       	ldd	r24, Y+3	; 0x03
    17d0:	81 30       	cpi	r24, 0x01	; 1
    17d2:	19 f4       	brne	.+6      	; 0x17da <MINT_NewState+0xc2>
		{ MINT_2_RAISINGEDGE();
    17d4:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <MINT_2_RAISINGEDGE>
    17d8:	10 c0       	rjmp	.+32     	; 0x17fa <MINT_NewState+0xe2>
			}
		else if ((config.INT_STATE==MINT_ON)&&(config.INT_MODE==MINT_FALLINGEDGE))
    17da:	8a 81       	ldd	r24, Y+2	; 0x02
    17dc:	81 30       	cpi	r24, 0x01	; 1
    17de:	31 f4       	brne	.+12     	; 0x17ec <MINT_NewState+0xd4>
    17e0:	8b 81       	ldd	r24, Y+3	; 0x03
    17e2:	82 30       	cpi	r24, 0x02	; 2
    17e4:	19 f4       	brne	.+6      	; 0x17ec <MINT_NewState+0xd4>
		{
			 MINT_2_FALLINGEDGE();
    17e6:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <MINT_2_FALLINGEDGE>
    17ea:	07 c0       	rjmp	.+14     	; 0x17fa <MINT_NewState+0xe2>
		}
		else
		 {
			ClearBit(GICR,5);
    17ec:	ab e5       	ldi	r26, 0x5B	; 91
    17ee:	b0 e0       	ldi	r27, 0x00	; 0
    17f0:	eb e5       	ldi	r30, 0x5B	; 91
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	80 81       	ld	r24, Z
    17f6:	8f 7d       	andi	r24, 0xDF	; 223
    17f8:	8c 93       	st	X, r24
		 }
}

}
    17fa:	0f 90       	pop	r0
    17fc:	0f 90       	pop	r0
    17fe:	0f 90       	pop	r0
    1800:	cf 91       	pop	r28
    1802:	df 91       	pop	r29
    1804:	08 95       	ret

00001806 <MINT_Init>:
void MINT_Init(void)
{
    1806:	df 93       	push	r29
    1808:	cf 93       	push	r28
    180a:	cd b7       	in	r28, 0x3d	; 61
    180c:	de b7       	in	r29, 0x3e	; 62
MINT_NewState(MINT_Init_INT0);
    180e:	60 91 68 00 	lds	r22, 0x0068
    1812:	70 91 69 00 	lds	r23, 0x0069
    1816:	80 91 6a 00 	lds	r24, 0x006A
    181a:	0e 94 8c 0b 	call	0x1718	; 0x1718 <MINT_NewState>
MINT_NewState(MINT_Init_INT1);
    181e:	60 91 6b 00 	lds	r22, 0x006B
    1822:	70 91 6c 00 	lds	r23, 0x006C
    1826:	80 91 6d 00 	lds	r24, 0x006D
    182a:	0e 94 8c 0b 	call	0x1718	; 0x1718 <MINT_NewState>
MINT_NewState(MINT_Init_INT2);
    182e:	60 91 6e 00 	lds	r22, 0x006E
    1832:	70 91 6f 00 	lds	r23, 0x006F
    1836:	80 91 70 00 	lds	r24, 0x0070
    183a:	0e 94 8c 0b 	call	0x1718	; 0x1718 <MINT_NewState>
}
    183e:	cf 91       	pop	r28
    1840:	df 91       	pop	r29
    1842:	08 95       	ret

00001844 <MINT_INT0_CallBacK>:
void MINT_INT0_CallBacK(void(*ptr)(void))
{
    1844:	df 93       	push	r29
    1846:	cf 93       	push	r28
    1848:	00 d0       	rcall	.+0      	; 0x184a <MINT_INT0_CallBacK+0x6>
    184a:	cd b7       	in	r28, 0x3d	; 61
    184c:	de b7       	in	r29, 0x3e	; 62
    184e:	9a 83       	std	Y+2, r25	; 0x02
    1850:	89 83       	std	Y+1, r24	; 0x01
	INT0=ptr;
    1852:	89 81       	ldd	r24, Y+1	; 0x01
    1854:	9a 81       	ldd	r25, Y+2	; 0x02
    1856:	90 93 73 00 	sts	0x0073, r25
    185a:	80 93 72 00 	sts	0x0072, r24
}
    185e:	0f 90       	pop	r0
    1860:	0f 90       	pop	r0
    1862:	cf 91       	pop	r28
    1864:	df 91       	pop	r29
    1866:	08 95       	ret

00001868 <MINT_INT1_CallBacK>:


void MINT_INT1_CallBacK(void(*ptr)(void))
{ INT1=ptr;
    1868:	df 93       	push	r29
    186a:	cf 93       	push	r28
    186c:	00 d0       	rcall	.+0      	; 0x186e <MINT_INT1_CallBacK+0x6>
    186e:	cd b7       	in	r28, 0x3d	; 61
    1870:	de b7       	in	r29, 0x3e	; 62
    1872:	9a 83       	std	Y+2, r25	; 0x02
    1874:	89 83       	std	Y+1, r24	; 0x01
    1876:	89 81       	ldd	r24, Y+1	; 0x01
    1878:	9a 81       	ldd	r25, Y+2	; 0x02
    187a:	90 93 75 00 	sts	0x0075, r25
    187e:	80 93 74 00 	sts	0x0074, r24
	}
    1882:	0f 90       	pop	r0
    1884:	0f 90       	pop	r0
    1886:	cf 91       	pop	r28
    1888:	df 91       	pop	r29
    188a:	08 95       	ret

0000188c <MINT_INT2_CallBacK>:


void MINT_INT2_CallBacK(void(*ptr)(void)){
    188c:	df 93       	push	r29
    188e:	cf 93       	push	r28
    1890:	00 d0       	rcall	.+0      	; 0x1892 <MINT_INT2_CallBacK+0x6>
    1892:	cd b7       	in	r28, 0x3d	; 61
    1894:	de b7       	in	r29, 0x3e	; 62
    1896:	9a 83       	std	Y+2, r25	; 0x02
    1898:	89 83       	std	Y+1, r24	; 0x01
	INT2=ptr;
    189a:	89 81       	ldd	r24, Y+1	; 0x01
    189c:	9a 81       	ldd	r25, Y+2	; 0x02
    189e:	90 93 77 00 	sts	0x0077, r25
    18a2:	80 93 76 00 	sts	0x0076, r24
}
    18a6:	0f 90       	pop	r0
    18a8:	0f 90       	pop	r0
    18aa:	cf 91       	pop	r28
    18ac:	df 91       	pop	r29
    18ae:	08 95       	ret

000018b0 <__vector_1>:


void __vector_1(void)
{
    18b0:	1f 92       	push	r1
    18b2:	0f 92       	push	r0
    18b4:	0f b6       	in	r0, 0x3f	; 63
    18b6:	0f 92       	push	r0
    18b8:	11 24       	eor	r1, r1
    18ba:	2f 93       	push	r18
    18bc:	3f 93       	push	r19
    18be:	4f 93       	push	r20
    18c0:	5f 93       	push	r21
    18c2:	6f 93       	push	r22
    18c4:	7f 93       	push	r23
    18c6:	8f 93       	push	r24
    18c8:	9f 93       	push	r25
    18ca:	af 93       	push	r26
    18cc:	bf 93       	push	r27
    18ce:	ef 93       	push	r30
    18d0:	ff 93       	push	r31
    18d2:	df 93       	push	r29
    18d4:	cf 93       	push	r28
    18d6:	cd b7       	in	r28, 0x3d	; 61
    18d8:	de b7       	in	r29, 0x3e	; 62
	INT0();
    18da:	e0 91 72 00 	lds	r30, 0x0072
    18de:	f0 91 73 00 	lds	r31, 0x0073
    18e2:	09 95       	icall
	}
    18e4:	cf 91       	pop	r28
    18e6:	df 91       	pop	r29
    18e8:	ff 91       	pop	r31
    18ea:	ef 91       	pop	r30
    18ec:	bf 91       	pop	r27
    18ee:	af 91       	pop	r26
    18f0:	9f 91       	pop	r25
    18f2:	8f 91       	pop	r24
    18f4:	7f 91       	pop	r23
    18f6:	6f 91       	pop	r22
    18f8:	5f 91       	pop	r21
    18fa:	4f 91       	pop	r20
    18fc:	3f 91       	pop	r19
    18fe:	2f 91       	pop	r18
    1900:	0f 90       	pop	r0
    1902:	0f be       	out	0x3f, r0	; 63
    1904:	0f 90       	pop	r0
    1906:	1f 90       	pop	r1
    1908:	18 95       	reti

0000190a <__vector_2>:


void __vector_2(void)
{
    190a:	1f 92       	push	r1
    190c:	0f 92       	push	r0
    190e:	0f b6       	in	r0, 0x3f	; 63
    1910:	0f 92       	push	r0
    1912:	11 24       	eor	r1, r1
    1914:	2f 93       	push	r18
    1916:	3f 93       	push	r19
    1918:	4f 93       	push	r20
    191a:	5f 93       	push	r21
    191c:	6f 93       	push	r22
    191e:	7f 93       	push	r23
    1920:	8f 93       	push	r24
    1922:	9f 93       	push	r25
    1924:	af 93       	push	r26
    1926:	bf 93       	push	r27
    1928:	ef 93       	push	r30
    192a:	ff 93       	push	r31
    192c:	df 93       	push	r29
    192e:	cf 93       	push	r28
    1930:	cd b7       	in	r28, 0x3d	; 61
    1932:	de b7       	in	r29, 0x3e	; 62
	INT1();
    1934:	e0 91 74 00 	lds	r30, 0x0074
    1938:	f0 91 75 00 	lds	r31, 0x0075
    193c:	09 95       	icall
	}
    193e:	cf 91       	pop	r28
    1940:	df 91       	pop	r29
    1942:	ff 91       	pop	r31
    1944:	ef 91       	pop	r30
    1946:	bf 91       	pop	r27
    1948:	af 91       	pop	r26
    194a:	9f 91       	pop	r25
    194c:	8f 91       	pop	r24
    194e:	7f 91       	pop	r23
    1950:	6f 91       	pop	r22
    1952:	5f 91       	pop	r21
    1954:	4f 91       	pop	r20
    1956:	3f 91       	pop	r19
    1958:	2f 91       	pop	r18
    195a:	0f 90       	pop	r0
    195c:	0f be       	out	0x3f, r0	; 63
    195e:	0f 90       	pop	r0
    1960:	1f 90       	pop	r1
    1962:	18 95       	reti

00001964 <__vector_3>:


void __vector_3(void)
{
    1964:	1f 92       	push	r1
    1966:	0f 92       	push	r0
    1968:	0f b6       	in	r0, 0x3f	; 63
    196a:	0f 92       	push	r0
    196c:	11 24       	eor	r1, r1
    196e:	2f 93       	push	r18
    1970:	3f 93       	push	r19
    1972:	4f 93       	push	r20
    1974:	5f 93       	push	r21
    1976:	6f 93       	push	r22
    1978:	7f 93       	push	r23
    197a:	8f 93       	push	r24
    197c:	9f 93       	push	r25
    197e:	af 93       	push	r26
    1980:	bf 93       	push	r27
    1982:	ef 93       	push	r30
    1984:	ff 93       	push	r31
    1986:	df 93       	push	r29
    1988:	cf 93       	push	r28
    198a:	cd b7       	in	r28, 0x3d	; 61
    198c:	de b7       	in	r29, 0x3e	; 62
	INT2();
    198e:	e0 91 76 00 	lds	r30, 0x0076
    1992:	f0 91 77 00 	lds	r31, 0x0077
    1996:	09 95       	icall
	}
    1998:	cf 91       	pop	r28
    199a:	df 91       	pop	r29
    199c:	ff 91       	pop	r31
    199e:	ef 91       	pop	r30
    19a0:	bf 91       	pop	r27
    19a2:	af 91       	pop	r26
    19a4:	9f 91       	pop	r25
    19a6:	8f 91       	pop	r24
    19a8:	7f 91       	pop	r23
    19aa:	6f 91       	pop	r22
    19ac:	5f 91       	pop	r21
    19ae:	4f 91       	pop	r20
    19b0:	3f 91       	pop	r19
    19b2:	2f 91       	pop	r18
    19b4:	0f 90       	pop	r0
    19b6:	0f be       	out	0x3f, r0	; 63
    19b8:	0f 90       	pop	r0
    19ba:	1f 90       	pop	r1
    19bc:	18 95       	reti

000019be <MINT_0_FALLINGEDGE>:
static void MINT_0_FALLINGEDGE(void)
	{SetBit(GICR,6);
    19be:	df 93       	push	r29
    19c0:	cf 93       	push	r28
    19c2:	cd b7       	in	r28, 0x3d	; 61
    19c4:	de b7       	in	r29, 0x3e	; 62
    19c6:	ab e5       	ldi	r26, 0x5B	; 91
    19c8:	b0 e0       	ldi	r27, 0x00	; 0
    19ca:	eb e5       	ldi	r30, 0x5B	; 91
    19cc:	f0 e0       	ldi	r31, 0x00	; 0
    19ce:	80 81       	ld	r24, Z
    19d0:	80 64       	ori	r24, 0x40	; 64
    19d2:	8c 93       	st	X, r24
	ClearBit(MCUCR,0);
    19d4:	a5 e5       	ldi	r26, 0x55	; 85
    19d6:	b0 e0       	ldi	r27, 0x00	; 0
    19d8:	e5 e5       	ldi	r30, 0x55	; 85
    19da:	f0 e0       	ldi	r31, 0x00	; 0
    19dc:	80 81       	ld	r24, Z
    19de:	8e 7f       	andi	r24, 0xFE	; 254
    19e0:	8c 93       	st	X, r24
	SetBit(MCUCR,1);}
    19e2:	a5 e5       	ldi	r26, 0x55	; 85
    19e4:	b0 e0       	ldi	r27, 0x00	; 0
    19e6:	e5 e5       	ldi	r30, 0x55	; 85
    19e8:	f0 e0       	ldi	r31, 0x00	; 0
    19ea:	80 81       	ld	r24, Z
    19ec:	82 60       	ori	r24, 0x02	; 2
    19ee:	8c 93       	st	X, r24
    19f0:	cf 91       	pop	r28
    19f2:	df 91       	pop	r29
    19f4:	08 95       	ret

000019f6 <MINT_0_RAISINGGEDGE>:

static void MINT_0_RAISINGGEDGE(void)
	{SetBit(GICR,6);
    19f6:	df 93       	push	r29
    19f8:	cf 93       	push	r28
    19fa:	cd b7       	in	r28, 0x3d	; 61
    19fc:	de b7       	in	r29, 0x3e	; 62
    19fe:	ab e5       	ldi	r26, 0x5B	; 91
    1a00:	b0 e0       	ldi	r27, 0x00	; 0
    1a02:	eb e5       	ldi	r30, 0x5B	; 91
    1a04:	f0 e0       	ldi	r31, 0x00	; 0
    1a06:	80 81       	ld	r24, Z
    1a08:	80 64       	ori	r24, 0x40	; 64
    1a0a:	8c 93       	st	X, r24
	SetBit(MCUCR,0);
    1a0c:	a5 e5       	ldi	r26, 0x55	; 85
    1a0e:	b0 e0       	ldi	r27, 0x00	; 0
    1a10:	e5 e5       	ldi	r30, 0x55	; 85
    1a12:	f0 e0       	ldi	r31, 0x00	; 0
    1a14:	80 81       	ld	r24, Z
    1a16:	81 60       	ori	r24, 0x01	; 1
    1a18:	8c 93       	st	X, r24
	SetBit(MCUCR,1);}
    1a1a:	a5 e5       	ldi	r26, 0x55	; 85
    1a1c:	b0 e0       	ldi	r27, 0x00	; 0
    1a1e:	e5 e5       	ldi	r30, 0x55	; 85
    1a20:	f0 e0       	ldi	r31, 0x00	; 0
    1a22:	80 81       	ld	r24, Z
    1a24:	82 60       	ori	r24, 0x02	; 2
    1a26:	8c 93       	st	X, r24
    1a28:	cf 91       	pop	r28
    1a2a:	df 91       	pop	r29
    1a2c:	08 95       	ret

00001a2e <MINT_0_LOGICALEDGE>:

static void MINT_0_LOGICALEDGE(void)
{SetBit(GICR,6);
    1a2e:	df 93       	push	r29
    1a30:	cf 93       	push	r28
    1a32:	cd b7       	in	r28, 0x3d	; 61
    1a34:	de b7       	in	r29, 0x3e	; 62
    1a36:	ab e5       	ldi	r26, 0x5B	; 91
    1a38:	b0 e0       	ldi	r27, 0x00	; 0
    1a3a:	eb e5       	ldi	r30, 0x5B	; 91
    1a3c:	f0 e0       	ldi	r31, 0x00	; 0
    1a3e:	80 81       	ld	r24, Z
    1a40:	80 64       	ori	r24, 0x40	; 64
    1a42:	8c 93       	st	X, r24
	SetBit(MCUCR,0);
    1a44:	a5 e5       	ldi	r26, 0x55	; 85
    1a46:	b0 e0       	ldi	r27, 0x00	; 0
    1a48:	e5 e5       	ldi	r30, 0x55	; 85
    1a4a:	f0 e0       	ldi	r31, 0x00	; 0
    1a4c:	80 81       	ld	r24, Z
    1a4e:	81 60       	ori	r24, 0x01	; 1
    1a50:	8c 93       	st	X, r24
	ClearBit(MCUCR,1);}
    1a52:	a5 e5       	ldi	r26, 0x55	; 85
    1a54:	b0 e0       	ldi	r27, 0x00	; 0
    1a56:	e5 e5       	ldi	r30, 0x55	; 85
    1a58:	f0 e0       	ldi	r31, 0x00	; 0
    1a5a:	80 81       	ld	r24, Z
    1a5c:	8d 7f       	andi	r24, 0xFD	; 253
    1a5e:	8c 93       	st	X, r24
    1a60:	cf 91       	pop	r28
    1a62:	df 91       	pop	r29
    1a64:	08 95       	ret

00001a66 <MINT_1_FALLINGEDGE>:

static void MINT_1_FALLINGEDGE(void)
{SetBit(GICR,7);
    1a66:	df 93       	push	r29
    1a68:	cf 93       	push	r28
    1a6a:	cd b7       	in	r28, 0x3d	; 61
    1a6c:	de b7       	in	r29, 0x3e	; 62
    1a6e:	ab e5       	ldi	r26, 0x5B	; 91
    1a70:	b0 e0       	ldi	r27, 0x00	; 0
    1a72:	eb e5       	ldi	r30, 0x5B	; 91
    1a74:	f0 e0       	ldi	r31, 0x00	; 0
    1a76:	80 81       	ld	r24, Z
    1a78:	80 68       	ori	r24, 0x80	; 128
    1a7a:	8c 93       	st	X, r24
	ClearBit(MCUCR,2);
    1a7c:	a5 e5       	ldi	r26, 0x55	; 85
    1a7e:	b0 e0       	ldi	r27, 0x00	; 0
    1a80:	e5 e5       	ldi	r30, 0x55	; 85
    1a82:	f0 e0       	ldi	r31, 0x00	; 0
    1a84:	80 81       	ld	r24, Z
    1a86:	8b 7f       	andi	r24, 0xFB	; 251
    1a88:	8c 93       	st	X, r24
	SetBit(MCUCR,3);}
    1a8a:	a5 e5       	ldi	r26, 0x55	; 85
    1a8c:	b0 e0       	ldi	r27, 0x00	; 0
    1a8e:	e5 e5       	ldi	r30, 0x55	; 85
    1a90:	f0 e0       	ldi	r31, 0x00	; 0
    1a92:	80 81       	ld	r24, Z
    1a94:	88 60       	ori	r24, 0x08	; 8
    1a96:	8c 93       	st	X, r24
    1a98:	cf 91       	pop	r28
    1a9a:	df 91       	pop	r29
    1a9c:	08 95       	ret

00001a9e <MINT_1_RAISINGEDGE>:

static void MINT_1_RAISINGEDGE(void)
{SetBit(GICR,7);
    1a9e:	df 93       	push	r29
    1aa0:	cf 93       	push	r28
    1aa2:	cd b7       	in	r28, 0x3d	; 61
    1aa4:	de b7       	in	r29, 0x3e	; 62
    1aa6:	ab e5       	ldi	r26, 0x5B	; 91
    1aa8:	b0 e0       	ldi	r27, 0x00	; 0
    1aaa:	eb e5       	ldi	r30, 0x5B	; 91
    1aac:	f0 e0       	ldi	r31, 0x00	; 0
    1aae:	80 81       	ld	r24, Z
    1ab0:	80 68       	ori	r24, 0x80	; 128
    1ab2:	8c 93       	st	X, r24
	SetBit(MCUCR,2);
    1ab4:	a5 e5       	ldi	r26, 0x55	; 85
    1ab6:	b0 e0       	ldi	r27, 0x00	; 0
    1ab8:	e5 e5       	ldi	r30, 0x55	; 85
    1aba:	f0 e0       	ldi	r31, 0x00	; 0
    1abc:	80 81       	ld	r24, Z
    1abe:	84 60       	ori	r24, 0x04	; 4
    1ac0:	8c 93       	st	X, r24
	SetBit(MCUCR,3);}
    1ac2:	a5 e5       	ldi	r26, 0x55	; 85
    1ac4:	b0 e0       	ldi	r27, 0x00	; 0
    1ac6:	e5 e5       	ldi	r30, 0x55	; 85
    1ac8:	f0 e0       	ldi	r31, 0x00	; 0
    1aca:	80 81       	ld	r24, Z
    1acc:	88 60       	ori	r24, 0x08	; 8
    1ace:	8c 93       	st	X, r24
    1ad0:	cf 91       	pop	r28
    1ad2:	df 91       	pop	r29
    1ad4:	08 95       	ret

00001ad6 <MINT_1_LOGICALEDGE>:

static void MINT_1_LOGICALEDGE(void)
{SetBit(GICR,5);
    1ad6:	df 93       	push	r29
    1ad8:	cf 93       	push	r28
    1ada:	cd b7       	in	r28, 0x3d	; 61
    1adc:	de b7       	in	r29, 0x3e	; 62
    1ade:	ab e5       	ldi	r26, 0x5B	; 91
    1ae0:	b0 e0       	ldi	r27, 0x00	; 0
    1ae2:	eb e5       	ldi	r30, 0x5B	; 91
    1ae4:	f0 e0       	ldi	r31, 0x00	; 0
    1ae6:	80 81       	ld	r24, Z
    1ae8:	80 62       	ori	r24, 0x20	; 32
    1aea:	8c 93       	st	X, r24
	SetBit(MCUCR,2);
    1aec:	a5 e5       	ldi	r26, 0x55	; 85
    1aee:	b0 e0       	ldi	r27, 0x00	; 0
    1af0:	e5 e5       	ldi	r30, 0x55	; 85
    1af2:	f0 e0       	ldi	r31, 0x00	; 0
    1af4:	80 81       	ld	r24, Z
    1af6:	84 60       	ori	r24, 0x04	; 4
    1af8:	8c 93       	st	X, r24
	ClearBit(MCUCR,3);}
    1afa:	a5 e5       	ldi	r26, 0x55	; 85
    1afc:	b0 e0       	ldi	r27, 0x00	; 0
    1afe:	e5 e5       	ldi	r30, 0x55	; 85
    1b00:	f0 e0       	ldi	r31, 0x00	; 0
    1b02:	80 81       	ld	r24, Z
    1b04:	87 7f       	andi	r24, 0xF7	; 247
    1b06:	8c 93       	st	X, r24
    1b08:	cf 91       	pop	r28
    1b0a:	df 91       	pop	r29
    1b0c:	08 95       	ret

00001b0e <MINT_2_FALLINGEDGE>:

static void MINT_2_FALLINGEDGE(void)
{SetBit(GICR,5);
    1b0e:	df 93       	push	r29
    1b10:	cf 93       	push	r28
    1b12:	cd b7       	in	r28, 0x3d	; 61
    1b14:	de b7       	in	r29, 0x3e	; 62
    1b16:	ab e5       	ldi	r26, 0x5B	; 91
    1b18:	b0 e0       	ldi	r27, 0x00	; 0
    1b1a:	eb e5       	ldi	r30, 0x5B	; 91
    1b1c:	f0 e0       	ldi	r31, 0x00	; 0
    1b1e:	80 81       	ld	r24, Z
    1b20:	80 62       	ori	r24, 0x20	; 32
    1b22:	8c 93       	st	X, r24
	ClearBit(MCUCSR,6);}
    1b24:	a4 e5       	ldi	r26, 0x54	; 84
    1b26:	b0 e0       	ldi	r27, 0x00	; 0
    1b28:	e4 e5       	ldi	r30, 0x54	; 84
    1b2a:	f0 e0       	ldi	r31, 0x00	; 0
    1b2c:	80 81       	ld	r24, Z
    1b2e:	8f 7b       	andi	r24, 0xBF	; 191
    1b30:	8c 93       	st	X, r24
    1b32:	cf 91       	pop	r28
    1b34:	df 91       	pop	r29
    1b36:	08 95       	ret

00001b38 <MINT_2_RAISINGEDGE>:

static void MINT_2_RAISINGEDGE(void)
{
    1b38:	df 93       	push	r29
    1b3a:	cf 93       	push	r28
    1b3c:	cd b7       	in	r28, 0x3d	; 61
    1b3e:	de b7       	in	r29, 0x3e	; 62
SetBit(GICR,5);
    1b40:	ab e5       	ldi	r26, 0x5B	; 91
    1b42:	b0 e0       	ldi	r27, 0x00	; 0
    1b44:	eb e5       	ldi	r30, 0x5B	; 91
    1b46:	f0 e0       	ldi	r31, 0x00	; 0
    1b48:	80 81       	ld	r24, Z
    1b4a:	80 62       	ori	r24, 0x20	; 32
    1b4c:	8c 93       	st	X, r24
SetBit(MCUCSR,6);}
    1b4e:	a4 e5       	ldi	r26, 0x54	; 84
    1b50:	b0 e0       	ldi	r27, 0x00	; 0
    1b52:	e4 e5       	ldi	r30, 0x54	; 84
    1b54:	f0 e0       	ldi	r31, 0x00	; 0
    1b56:	80 81       	ld	r24, Z
    1b58:	80 64       	ori	r24, 0x40	; 64
    1b5a:	8c 93       	st	X, r24
    1b5c:	cf 91       	pop	r28
    1b5e:	df 91       	pop	r29
    1b60:	08 95       	ret

00001b62 <MDIO_Int>:
#include "MDIO_Int.h"



void MDIO_Int(void)
{
    1b62:	df 93       	push	r29
    1b64:	cf 93       	push	r28
    1b66:	cd b7       	in	r28, 0x3d	; 61
    1b68:	de b7       	in	r29, 0x3e	; 62
DDRA=conc(MDIO_DIR_PINNO_7,MDIO_DIR_PINNO_6,MDIO_DIR_PINNO_5,MDIO_DIR_PINNO_4,MDIO_DIR_PINNO_3,MDIO_DIR_PINNO_2,MDIO_DIR_PINNO_1,MDIO_DIR_PINNO_0);
    1b6a:	ea e3       	ldi	r30, 0x3A	; 58
    1b6c:	f0 e0       	ldi	r31, 0x00	; 0
    1b6e:	8f ef       	ldi	r24, 0xFF	; 255
    1b70:	80 83       	st	Z, r24
DDRB=conc(MDIO_DIR_PINNO_15,MDIO_DIR_PINNO_14,MDIO_DIR_PINNO_13,MDIO_DIR_PINNO_12,MDIO_DIR_PINNO_11,MDIO_DIR_PINNO_10,MDIO_DIR_PINNO_9,MDIO_DIR_PINNO_8);
    1b72:	e7 e3       	ldi	r30, 0x37	; 55
    1b74:	f0 e0       	ldi	r31, 0x00	; 0
    1b76:	8f ef       	ldi	r24, 0xFF	; 255
    1b78:	80 83       	st	Z, r24
DDRC=conc(MDIO_DIR_PINNO_23,MDIO_DIR_PINNO_22,MDIO_DIR_PINNO_21,MDIO_DIR_PINNO_20,MDIO_DIR_PINNO_19,MDIO_DIR_PINNO_18,MDIO_DIR_PINNO_17,MDIO_DIR_PINNO_16);
    1b7a:	e4 e3       	ldi	r30, 0x34	; 52
    1b7c:	f0 e0       	ldi	r31, 0x00	; 0
    1b7e:	8f ef       	ldi	r24, 0xFF	; 255
    1b80:	80 83       	st	Z, r24
DDRD=conc(MDIO_DIR_PINNO_31,MDIO_DIR_PINNO_30,MDIO_DIR_PINNO_29,MDIO_DIR_PINNO_28,MDIO_DIR_PINNO_27,MDIO_DIR_PINNO_26,MDIO_DIR_PINNO_25,MDIO_DIR_PINNO_24);
    1b82:	e1 e3       	ldi	r30, 0x31	; 49
    1b84:	f0 e0       	ldi	r31, 0x00	; 0
    1b86:	8f ef       	ldi	r24, 0xFF	; 255
    1b88:	80 83       	st	Z, r24

PORTA=conc(MDIO_PORT_NO_7,MDIO_PORT_NO_6,MDIO_PORT_NO_5,MDIO_PORT_NO_4,MDIO_PORT_NO_3,MDIO_PORT_NO_2,MDIO_PORT_NO_1,MDIO_PORT_NO_0);
    1b8a:	eb e3       	ldi	r30, 0x3B	; 59
    1b8c:	f0 e0       	ldi	r31, 0x00	; 0
    1b8e:	8f ef       	ldi	r24, 0xFF	; 255
    1b90:	80 83       	st	Z, r24
PORTB=conc(MDIO_PORT_NO_15,MDIO_PORT_NO_14,MDIO_PORT_NO_13,MDIO_PORT_NO_12,MDIO_PORT_NO_11,MDIO_PORT_NO_10,MDIO_PORT_NO_9,MDIO_PORT_NO_8);
    1b92:	e8 e3       	ldi	r30, 0x38	; 56
    1b94:	f0 e0       	ldi	r31, 0x00	; 0
    1b96:	8f ef       	ldi	r24, 0xFF	; 255
    1b98:	80 83       	st	Z, r24
PORTC=conc(MDIO_PORT_NO_23,MDIO_PORT_NO_22,MDIO_PORT_NO_21,MDIO_PORT_NO_20,MDIO_PORT_NO_19,MDIO_PORT_NO_18,MDIO_PORT_NO_17,MDIO_PORT_NO_16);
    1b9a:	e5 e3       	ldi	r30, 0x35	; 53
    1b9c:	f0 e0       	ldi	r31, 0x00	; 0
    1b9e:	8f ef       	ldi	r24, 0xFF	; 255
    1ba0:	80 83       	st	Z, r24
PORTD=conc(MDIO_PORT_NO_31,MDIO_PORT_NO_30,MDIO_PORT_NO_29,MDIO_PORT_NO_28,MDIO_PORT_NO_27,MDIO_PORT_NO_26,MDIO_PORT_NO_25,MDIO_PORT_NO_24);
    1ba2:	e2 e3       	ldi	r30, 0x32	; 50
    1ba4:	f0 e0       	ldi	r31, 0x00	; 0
    1ba6:	8f ef       	ldi	r24, 0xFF	; 255
    1ba8:	80 83       	st	Z, r24
}
    1baa:	cf 91       	pop	r28
    1bac:	df 91       	pop	r29
    1bae:	08 95       	ret

00001bb0 <MDIO_enuSetPinDir>:
tenumFncErrorState MDIO_enuSetPinDir(u8 MDIO_PORTNOCPY,u8 MDIO_PINNOCPY,u8 MDIO_DIR )
{
    1bb0:	df 93       	push	r29
    1bb2:	cf 93       	push	r28
    1bb4:	00 d0       	rcall	.+0      	; 0x1bb6 <MDIO_enuSetPinDir+0x6>
    1bb6:	00 d0       	rcall	.+0      	; 0x1bb8 <MDIO_enuSetPinDir+0x8>
    1bb8:	00 d0       	rcall	.+0      	; 0x1bba <MDIO_enuSetPinDir+0xa>
    1bba:	cd b7       	in	r28, 0x3d	; 61
    1bbc:	de b7       	in	r29, 0x3e	; 62
    1bbe:	8a 83       	std	Y+2, r24	; 0x02
    1bc0:	6b 83       	std	Y+3, r22	; 0x03
    1bc2:	4c 83       	std	Y+4, r20	; 0x04
tenumFncErrorState enuState=LSTY_EXECUTED_SUCCESSFULLY;
    1bc4:	19 82       	std	Y+1, r1	; 0x01
switch (MDIO_PORTNOCPY) {
    1bc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc8:	28 2f       	mov	r18, r24
    1bca:	30 e0       	ldi	r19, 0x00	; 0
    1bcc:	3e 83       	std	Y+6, r19	; 0x06
    1bce:	2d 83       	std	Y+5, r18	; 0x05
    1bd0:	8d 81       	ldd	r24, Y+5	; 0x05
    1bd2:	9e 81       	ldd	r25, Y+6	; 0x06
    1bd4:	81 30       	cpi	r24, 0x01	; 1
    1bd6:	91 05       	cpc	r25, r1
    1bd8:	09 f4       	brne	.+2      	; 0x1bdc <MDIO_enuSetPinDir+0x2c>
    1bda:	47 c0       	rjmp	.+142    	; 0x1c6a <MDIO_enuSetPinDir+0xba>
    1bdc:	2d 81       	ldd	r18, Y+5	; 0x05
    1bde:	3e 81       	ldd	r19, Y+6	; 0x06
    1be0:	22 30       	cpi	r18, 0x02	; 2
    1be2:	31 05       	cpc	r19, r1
    1be4:	2c f4       	brge	.+10     	; 0x1bf0 <MDIO_enuSetPinDir+0x40>
    1be6:	8d 81       	ldd	r24, Y+5	; 0x05
    1be8:	9e 81       	ldd	r25, Y+6	; 0x06
    1bea:	00 97       	sbiw	r24, 0x00	; 0
    1bec:	71 f0       	breq	.+28     	; 0x1c0a <MDIO_enuSetPinDir+0x5a>
    1bee:	cb c0       	rjmp	.+406    	; 0x1d86 <MDIO_enuSetPinDir+0x1d6>
    1bf0:	2d 81       	ldd	r18, Y+5	; 0x05
    1bf2:	3e 81       	ldd	r19, Y+6	; 0x06
    1bf4:	22 30       	cpi	r18, 0x02	; 2
    1bf6:	31 05       	cpc	r19, r1
    1bf8:	09 f4       	brne	.+2      	; 0x1bfc <MDIO_enuSetPinDir+0x4c>
    1bfa:	67 c0       	rjmp	.+206    	; 0x1cca <MDIO_enuSetPinDir+0x11a>
    1bfc:	8d 81       	ldd	r24, Y+5	; 0x05
    1bfe:	9e 81       	ldd	r25, Y+6	; 0x06
    1c00:	83 30       	cpi	r24, 0x03	; 3
    1c02:	91 05       	cpc	r25, r1
    1c04:	09 f4       	brne	.+2      	; 0x1c08 <MDIO_enuSetPinDir+0x58>
    1c06:	91 c0       	rjmp	.+290    	; 0x1d2a <MDIO_enuSetPinDir+0x17a>
    1c08:	be c0       	rjmp	.+380    	; 0x1d86 <MDIO_enuSetPinDir+0x1d6>
	case MDIO_PORTA:
		if(MDIO_DIR==MDIO_OUTPUT)
    1c0a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c0c:	81 30       	cpi	r24, 0x01	; 1
    1c0e:	a1 f4       	brne	.+40     	; 0x1c38 <MDIO_enuSetPinDir+0x88>
			{
			SetBit(DDRA,MDIO_PINNOCPY);
    1c10:	aa e3       	ldi	r26, 0x3A	; 58
    1c12:	b0 e0       	ldi	r27, 0x00	; 0
    1c14:	ea e3       	ldi	r30, 0x3A	; 58
    1c16:	f0 e0       	ldi	r31, 0x00	; 0
    1c18:	80 81       	ld	r24, Z
    1c1a:	48 2f       	mov	r20, r24
    1c1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c1e:	28 2f       	mov	r18, r24
    1c20:	30 e0       	ldi	r19, 0x00	; 0
    1c22:	81 e0       	ldi	r24, 0x01	; 1
    1c24:	90 e0       	ldi	r25, 0x00	; 0
    1c26:	02 2e       	mov	r0, r18
    1c28:	02 c0       	rjmp	.+4      	; 0x1c2e <MDIO_enuSetPinDir+0x7e>
    1c2a:	88 0f       	add	r24, r24
    1c2c:	99 1f       	adc	r25, r25
    1c2e:	0a 94       	dec	r0
    1c30:	e2 f7       	brpl	.-8      	; 0x1c2a <MDIO_enuSetPinDir+0x7a>
    1c32:	84 2b       	or	r24, r20
    1c34:	8c 93       	st	X, r24
    1c36:	a7 c0       	rjmp	.+334    	; 0x1d86 <MDIO_enuSetPinDir+0x1d6>
			}
		else if (MDIO_DIR==MDIO_INPUT)
    1c38:	8c 81       	ldd	r24, Y+4	; 0x04
    1c3a:	88 23       	and	r24, r24
    1c3c:	09 f0       	breq	.+2      	; 0x1c40 <MDIO_enuSetPinDir+0x90>
    1c3e:	a3 c0       	rjmp	.+326    	; 0x1d86 <MDIO_enuSetPinDir+0x1d6>
			{
			ClearBit(DDRA,MDIO_PINNOCPY);
    1c40:	aa e3       	ldi	r26, 0x3A	; 58
    1c42:	b0 e0       	ldi	r27, 0x00	; 0
    1c44:	ea e3       	ldi	r30, 0x3A	; 58
    1c46:	f0 e0       	ldi	r31, 0x00	; 0
    1c48:	80 81       	ld	r24, Z
    1c4a:	48 2f       	mov	r20, r24
    1c4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c4e:	28 2f       	mov	r18, r24
    1c50:	30 e0       	ldi	r19, 0x00	; 0
    1c52:	81 e0       	ldi	r24, 0x01	; 1
    1c54:	90 e0       	ldi	r25, 0x00	; 0
    1c56:	02 2e       	mov	r0, r18
    1c58:	02 c0       	rjmp	.+4      	; 0x1c5e <MDIO_enuSetPinDir+0xae>
    1c5a:	88 0f       	add	r24, r24
    1c5c:	99 1f       	adc	r25, r25
    1c5e:	0a 94       	dec	r0
    1c60:	e2 f7       	brpl	.-8      	; 0x1c5a <MDIO_enuSetPinDir+0xaa>
    1c62:	80 95       	com	r24
    1c64:	84 23       	and	r24, r20
    1c66:	8c 93       	st	X, r24
    1c68:	8e c0       	rjmp	.+284    	; 0x1d86 <MDIO_enuSetPinDir+0x1d6>
			}
	break;

	case MDIO_PORTB:
		if(MDIO_DIR==MDIO_OUTPUT)
    1c6a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c6c:	81 30       	cpi	r24, 0x01	; 1
    1c6e:	a1 f4       	brne	.+40     	; 0x1c98 <MDIO_enuSetPinDir+0xe8>
			{
			SetBit(DDRB,MDIO_PINNOCPY);
    1c70:	a7 e3       	ldi	r26, 0x37	; 55
    1c72:	b0 e0       	ldi	r27, 0x00	; 0
    1c74:	e7 e3       	ldi	r30, 0x37	; 55
    1c76:	f0 e0       	ldi	r31, 0x00	; 0
    1c78:	80 81       	ld	r24, Z
    1c7a:	48 2f       	mov	r20, r24
    1c7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c7e:	28 2f       	mov	r18, r24
    1c80:	30 e0       	ldi	r19, 0x00	; 0
    1c82:	81 e0       	ldi	r24, 0x01	; 1
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	02 2e       	mov	r0, r18
    1c88:	02 c0       	rjmp	.+4      	; 0x1c8e <MDIO_enuSetPinDir+0xde>
    1c8a:	88 0f       	add	r24, r24
    1c8c:	99 1f       	adc	r25, r25
    1c8e:	0a 94       	dec	r0
    1c90:	e2 f7       	brpl	.-8      	; 0x1c8a <MDIO_enuSetPinDir+0xda>
    1c92:	84 2b       	or	r24, r20
    1c94:	8c 93       	st	X, r24
    1c96:	77 c0       	rjmp	.+238    	; 0x1d86 <MDIO_enuSetPinDir+0x1d6>
			}
		else if (MDIO_DIR==MDIO_INPUT)
    1c98:	8c 81       	ldd	r24, Y+4	; 0x04
    1c9a:	88 23       	and	r24, r24
    1c9c:	09 f0       	breq	.+2      	; 0x1ca0 <MDIO_enuSetPinDir+0xf0>
    1c9e:	73 c0       	rjmp	.+230    	; 0x1d86 <MDIO_enuSetPinDir+0x1d6>
			{
			ClearBit(DDRB,MDIO_PINNOCPY);
    1ca0:	a7 e3       	ldi	r26, 0x37	; 55
    1ca2:	b0 e0       	ldi	r27, 0x00	; 0
    1ca4:	e7 e3       	ldi	r30, 0x37	; 55
    1ca6:	f0 e0       	ldi	r31, 0x00	; 0
    1ca8:	80 81       	ld	r24, Z
    1caa:	48 2f       	mov	r20, r24
    1cac:	8b 81       	ldd	r24, Y+3	; 0x03
    1cae:	28 2f       	mov	r18, r24
    1cb0:	30 e0       	ldi	r19, 0x00	; 0
    1cb2:	81 e0       	ldi	r24, 0x01	; 1
    1cb4:	90 e0       	ldi	r25, 0x00	; 0
    1cb6:	02 2e       	mov	r0, r18
    1cb8:	02 c0       	rjmp	.+4      	; 0x1cbe <MDIO_enuSetPinDir+0x10e>
    1cba:	88 0f       	add	r24, r24
    1cbc:	99 1f       	adc	r25, r25
    1cbe:	0a 94       	dec	r0
    1cc0:	e2 f7       	brpl	.-8      	; 0x1cba <MDIO_enuSetPinDir+0x10a>
    1cc2:	80 95       	com	r24
    1cc4:	84 23       	and	r24, r20
    1cc6:	8c 93       	st	X, r24
    1cc8:	5e c0       	rjmp	.+188    	; 0x1d86 <MDIO_enuSetPinDir+0x1d6>
			}
	break;

	case MDIO_PORTC:
		if(MDIO_DIR==MDIO_OUTPUT)
    1cca:	8c 81       	ldd	r24, Y+4	; 0x04
    1ccc:	81 30       	cpi	r24, 0x01	; 1
    1cce:	a1 f4       	brne	.+40     	; 0x1cf8 <MDIO_enuSetPinDir+0x148>
			{
			SetBit(DDRC,MDIO_PINNOCPY);
    1cd0:	a4 e3       	ldi	r26, 0x34	; 52
    1cd2:	b0 e0       	ldi	r27, 0x00	; 0
    1cd4:	e4 e3       	ldi	r30, 0x34	; 52
    1cd6:	f0 e0       	ldi	r31, 0x00	; 0
    1cd8:	80 81       	ld	r24, Z
    1cda:	48 2f       	mov	r20, r24
    1cdc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cde:	28 2f       	mov	r18, r24
    1ce0:	30 e0       	ldi	r19, 0x00	; 0
    1ce2:	81 e0       	ldi	r24, 0x01	; 1
    1ce4:	90 e0       	ldi	r25, 0x00	; 0
    1ce6:	02 2e       	mov	r0, r18
    1ce8:	02 c0       	rjmp	.+4      	; 0x1cee <MDIO_enuSetPinDir+0x13e>
    1cea:	88 0f       	add	r24, r24
    1cec:	99 1f       	adc	r25, r25
    1cee:	0a 94       	dec	r0
    1cf0:	e2 f7       	brpl	.-8      	; 0x1cea <MDIO_enuSetPinDir+0x13a>
    1cf2:	84 2b       	or	r24, r20
    1cf4:	8c 93       	st	X, r24
    1cf6:	47 c0       	rjmp	.+142    	; 0x1d86 <MDIO_enuSetPinDir+0x1d6>
			}
		else if (MDIO_DIR==MDIO_INPUT)
    1cf8:	8c 81       	ldd	r24, Y+4	; 0x04
    1cfa:	88 23       	and	r24, r24
    1cfc:	09 f0       	breq	.+2      	; 0x1d00 <MDIO_enuSetPinDir+0x150>
    1cfe:	43 c0       	rjmp	.+134    	; 0x1d86 <MDIO_enuSetPinDir+0x1d6>
			{
			ClearBit(DDRC,MDIO_PINNOCPY);
    1d00:	a4 e3       	ldi	r26, 0x34	; 52
    1d02:	b0 e0       	ldi	r27, 0x00	; 0
    1d04:	e4 e3       	ldi	r30, 0x34	; 52
    1d06:	f0 e0       	ldi	r31, 0x00	; 0
    1d08:	80 81       	ld	r24, Z
    1d0a:	48 2f       	mov	r20, r24
    1d0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d0e:	28 2f       	mov	r18, r24
    1d10:	30 e0       	ldi	r19, 0x00	; 0
    1d12:	81 e0       	ldi	r24, 0x01	; 1
    1d14:	90 e0       	ldi	r25, 0x00	; 0
    1d16:	02 2e       	mov	r0, r18
    1d18:	02 c0       	rjmp	.+4      	; 0x1d1e <MDIO_enuSetPinDir+0x16e>
    1d1a:	88 0f       	add	r24, r24
    1d1c:	99 1f       	adc	r25, r25
    1d1e:	0a 94       	dec	r0
    1d20:	e2 f7       	brpl	.-8      	; 0x1d1a <MDIO_enuSetPinDir+0x16a>
    1d22:	80 95       	com	r24
    1d24:	84 23       	and	r24, r20
    1d26:	8c 93       	st	X, r24
    1d28:	2e c0       	rjmp	.+92     	; 0x1d86 <MDIO_enuSetPinDir+0x1d6>
			}
		break;
	case MDIO_PORTD:
		if(MDIO_DIR==MDIO_OUTPUT)
    1d2a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d2c:	81 30       	cpi	r24, 0x01	; 1
    1d2e:	a1 f4       	brne	.+40     	; 0x1d58 <MDIO_enuSetPinDir+0x1a8>
			{
			SetBit(DDRD,MDIO_PINNOCPY);
    1d30:	a1 e3       	ldi	r26, 0x31	; 49
    1d32:	b0 e0       	ldi	r27, 0x00	; 0
    1d34:	e1 e3       	ldi	r30, 0x31	; 49
    1d36:	f0 e0       	ldi	r31, 0x00	; 0
    1d38:	80 81       	ld	r24, Z
    1d3a:	48 2f       	mov	r20, r24
    1d3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d3e:	28 2f       	mov	r18, r24
    1d40:	30 e0       	ldi	r19, 0x00	; 0
    1d42:	81 e0       	ldi	r24, 0x01	; 1
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	02 2e       	mov	r0, r18
    1d48:	02 c0       	rjmp	.+4      	; 0x1d4e <MDIO_enuSetPinDir+0x19e>
    1d4a:	88 0f       	add	r24, r24
    1d4c:	99 1f       	adc	r25, r25
    1d4e:	0a 94       	dec	r0
    1d50:	e2 f7       	brpl	.-8      	; 0x1d4a <MDIO_enuSetPinDir+0x19a>
    1d52:	84 2b       	or	r24, r20
    1d54:	8c 93       	st	X, r24
    1d56:	17 c0       	rjmp	.+46     	; 0x1d86 <MDIO_enuSetPinDir+0x1d6>
			}
		else if (MDIO_DIR==MDIO_INPUT)
    1d58:	8c 81       	ldd	r24, Y+4	; 0x04
    1d5a:	88 23       	and	r24, r24
    1d5c:	a1 f4       	brne	.+40     	; 0x1d86 <MDIO_enuSetPinDir+0x1d6>
			{
			ClearBit(DDRD,MDIO_PINNOCPY);
    1d5e:	a1 e3       	ldi	r26, 0x31	; 49
    1d60:	b0 e0       	ldi	r27, 0x00	; 0
    1d62:	e1 e3       	ldi	r30, 0x31	; 49
    1d64:	f0 e0       	ldi	r31, 0x00	; 0
    1d66:	80 81       	ld	r24, Z
    1d68:	48 2f       	mov	r20, r24
    1d6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d6c:	28 2f       	mov	r18, r24
    1d6e:	30 e0       	ldi	r19, 0x00	; 0
    1d70:	81 e0       	ldi	r24, 0x01	; 1
    1d72:	90 e0       	ldi	r25, 0x00	; 0
    1d74:	02 2e       	mov	r0, r18
    1d76:	02 c0       	rjmp	.+4      	; 0x1d7c <MDIO_enuSetPinDir+0x1cc>
    1d78:	88 0f       	add	r24, r24
    1d7a:	99 1f       	adc	r25, r25
    1d7c:	0a 94       	dec	r0
    1d7e:	e2 f7       	brpl	.-8      	; 0x1d78 <MDIO_enuSetPinDir+0x1c8>
    1d80:	80 95       	com	r24
    1d82:	84 23       	and	r24, r20
    1d84:	8c 93       	st	X, r24
			}
	break;
	default:
		break;
}
return enuState;
    1d86:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d88:	26 96       	adiw	r28, 0x06	; 6
    1d8a:	0f b6       	in	r0, 0x3f	; 63
    1d8c:	f8 94       	cli
    1d8e:	de bf       	out	0x3e, r29	; 62
    1d90:	0f be       	out	0x3f, r0	; 63
    1d92:	cd bf       	out	0x3d, r28	; 61
    1d94:	cf 91       	pop	r28
    1d96:	df 91       	pop	r29
    1d98:	08 95       	ret

00001d9a <MDIO_enuSetPinValue>:
tenumFncErrorState MDIO_enuSetPinValue(u8 MDIO_PORTNOCPY,u8 MDIO_PINNOCPY,u8 MDIO_Value )
{
    1d9a:	df 93       	push	r29
    1d9c:	cf 93       	push	r28
    1d9e:	00 d0       	rcall	.+0      	; 0x1da0 <MDIO_enuSetPinValue+0x6>
    1da0:	00 d0       	rcall	.+0      	; 0x1da2 <MDIO_enuSetPinValue+0x8>
    1da2:	00 d0       	rcall	.+0      	; 0x1da4 <MDIO_enuSetPinValue+0xa>
    1da4:	cd b7       	in	r28, 0x3d	; 61
    1da6:	de b7       	in	r29, 0x3e	; 62
    1da8:	8a 83       	std	Y+2, r24	; 0x02
    1daa:	6b 83       	std	Y+3, r22	; 0x03
    1dac:	4c 83       	std	Y+4, r20	; 0x04
	tenumFncErrorState enuState=LSTY_EXECUTED_SUCCESSFULLY;
    1dae:	19 82       	std	Y+1, r1	; 0x01
	switch (MDIO_PORTNOCPY) {
    1db0:	8a 81       	ldd	r24, Y+2	; 0x02
    1db2:	28 2f       	mov	r18, r24
    1db4:	30 e0       	ldi	r19, 0x00	; 0
    1db6:	3e 83       	std	Y+6, r19	; 0x06
    1db8:	2d 83       	std	Y+5, r18	; 0x05
    1dba:	8d 81       	ldd	r24, Y+5	; 0x05
    1dbc:	9e 81       	ldd	r25, Y+6	; 0x06
    1dbe:	81 30       	cpi	r24, 0x01	; 1
    1dc0:	91 05       	cpc	r25, r1
    1dc2:	09 f4       	brne	.+2      	; 0x1dc6 <MDIO_enuSetPinValue+0x2c>
    1dc4:	47 c0       	rjmp	.+142    	; 0x1e54 <MDIO_enuSetPinValue+0xba>
    1dc6:	2d 81       	ldd	r18, Y+5	; 0x05
    1dc8:	3e 81       	ldd	r19, Y+6	; 0x06
    1dca:	22 30       	cpi	r18, 0x02	; 2
    1dcc:	31 05       	cpc	r19, r1
    1dce:	2c f4       	brge	.+10     	; 0x1dda <MDIO_enuSetPinValue+0x40>
    1dd0:	8d 81       	ldd	r24, Y+5	; 0x05
    1dd2:	9e 81       	ldd	r25, Y+6	; 0x06
    1dd4:	00 97       	sbiw	r24, 0x00	; 0
    1dd6:	71 f0       	breq	.+28     	; 0x1df4 <MDIO_enuSetPinValue+0x5a>
    1dd8:	cb c0       	rjmp	.+406    	; 0x1f70 <MDIO_enuSetPinValue+0x1d6>
    1dda:	2d 81       	ldd	r18, Y+5	; 0x05
    1ddc:	3e 81       	ldd	r19, Y+6	; 0x06
    1dde:	22 30       	cpi	r18, 0x02	; 2
    1de0:	31 05       	cpc	r19, r1
    1de2:	09 f4       	brne	.+2      	; 0x1de6 <MDIO_enuSetPinValue+0x4c>
    1de4:	67 c0       	rjmp	.+206    	; 0x1eb4 <MDIO_enuSetPinValue+0x11a>
    1de6:	8d 81       	ldd	r24, Y+5	; 0x05
    1de8:	9e 81       	ldd	r25, Y+6	; 0x06
    1dea:	83 30       	cpi	r24, 0x03	; 3
    1dec:	91 05       	cpc	r25, r1
    1dee:	09 f4       	brne	.+2      	; 0x1df2 <MDIO_enuSetPinValue+0x58>
    1df0:	91 c0       	rjmp	.+290    	; 0x1f14 <MDIO_enuSetPinValue+0x17a>
    1df2:	be c0       	rjmp	.+380    	; 0x1f70 <MDIO_enuSetPinValue+0x1d6>
		case MDIO_PORTA:
			if(MDIO_Value==MDIO_HIGHOUTPUT)
    1df4:	8c 81       	ldd	r24, Y+4	; 0x04
    1df6:	81 30       	cpi	r24, 0x01	; 1
    1df8:	a1 f4       	brne	.+40     	; 0x1e22 <MDIO_enuSetPinValue+0x88>
				{
				SetBit(PORTA,MDIO_PINNOCPY);
    1dfa:	ab e3       	ldi	r26, 0x3B	; 59
    1dfc:	b0 e0       	ldi	r27, 0x00	; 0
    1dfe:	eb e3       	ldi	r30, 0x3B	; 59
    1e00:	f0 e0       	ldi	r31, 0x00	; 0
    1e02:	80 81       	ld	r24, Z
    1e04:	48 2f       	mov	r20, r24
    1e06:	8b 81       	ldd	r24, Y+3	; 0x03
    1e08:	28 2f       	mov	r18, r24
    1e0a:	30 e0       	ldi	r19, 0x00	; 0
    1e0c:	81 e0       	ldi	r24, 0x01	; 1
    1e0e:	90 e0       	ldi	r25, 0x00	; 0
    1e10:	02 2e       	mov	r0, r18
    1e12:	02 c0       	rjmp	.+4      	; 0x1e18 <MDIO_enuSetPinValue+0x7e>
    1e14:	88 0f       	add	r24, r24
    1e16:	99 1f       	adc	r25, r25
    1e18:	0a 94       	dec	r0
    1e1a:	e2 f7       	brpl	.-8      	; 0x1e14 <MDIO_enuSetPinValue+0x7a>
    1e1c:	84 2b       	or	r24, r20
    1e1e:	8c 93       	st	X, r24
    1e20:	a7 c0       	rjmp	.+334    	; 0x1f70 <MDIO_enuSetPinValue+0x1d6>
				}
			else if (MDIO_Value==MDIO_LOWHOUTPUT)
    1e22:	8c 81       	ldd	r24, Y+4	; 0x04
    1e24:	88 23       	and	r24, r24
    1e26:	09 f0       	breq	.+2      	; 0x1e2a <MDIO_enuSetPinValue+0x90>
    1e28:	a3 c0       	rjmp	.+326    	; 0x1f70 <MDIO_enuSetPinValue+0x1d6>
				{
				ClearBit(PORTA,MDIO_PINNOCPY);
    1e2a:	ab e3       	ldi	r26, 0x3B	; 59
    1e2c:	b0 e0       	ldi	r27, 0x00	; 0
    1e2e:	eb e3       	ldi	r30, 0x3B	; 59
    1e30:	f0 e0       	ldi	r31, 0x00	; 0
    1e32:	80 81       	ld	r24, Z
    1e34:	48 2f       	mov	r20, r24
    1e36:	8b 81       	ldd	r24, Y+3	; 0x03
    1e38:	28 2f       	mov	r18, r24
    1e3a:	30 e0       	ldi	r19, 0x00	; 0
    1e3c:	81 e0       	ldi	r24, 0x01	; 1
    1e3e:	90 e0       	ldi	r25, 0x00	; 0
    1e40:	02 2e       	mov	r0, r18
    1e42:	02 c0       	rjmp	.+4      	; 0x1e48 <MDIO_enuSetPinValue+0xae>
    1e44:	88 0f       	add	r24, r24
    1e46:	99 1f       	adc	r25, r25
    1e48:	0a 94       	dec	r0
    1e4a:	e2 f7       	brpl	.-8      	; 0x1e44 <MDIO_enuSetPinValue+0xaa>
    1e4c:	80 95       	com	r24
    1e4e:	84 23       	and	r24, r20
    1e50:	8c 93       	st	X, r24
    1e52:	8e c0       	rjmp	.+284    	; 0x1f70 <MDIO_enuSetPinValue+0x1d6>
				}
		break;

		case MDIO_PORTB:
			if(MDIO_Value==MDIO_HIGHOUTPUT)
    1e54:	8c 81       	ldd	r24, Y+4	; 0x04
    1e56:	81 30       	cpi	r24, 0x01	; 1
    1e58:	a1 f4       	brne	.+40     	; 0x1e82 <MDIO_enuSetPinValue+0xe8>
				{
				SetBit(PORTB,MDIO_PINNOCPY);
    1e5a:	a8 e3       	ldi	r26, 0x38	; 56
    1e5c:	b0 e0       	ldi	r27, 0x00	; 0
    1e5e:	e8 e3       	ldi	r30, 0x38	; 56
    1e60:	f0 e0       	ldi	r31, 0x00	; 0
    1e62:	80 81       	ld	r24, Z
    1e64:	48 2f       	mov	r20, r24
    1e66:	8b 81       	ldd	r24, Y+3	; 0x03
    1e68:	28 2f       	mov	r18, r24
    1e6a:	30 e0       	ldi	r19, 0x00	; 0
    1e6c:	81 e0       	ldi	r24, 0x01	; 1
    1e6e:	90 e0       	ldi	r25, 0x00	; 0
    1e70:	02 2e       	mov	r0, r18
    1e72:	02 c0       	rjmp	.+4      	; 0x1e78 <MDIO_enuSetPinValue+0xde>
    1e74:	88 0f       	add	r24, r24
    1e76:	99 1f       	adc	r25, r25
    1e78:	0a 94       	dec	r0
    1e7a:	e2 f7       	brpl	.-8      	; 0x1e74 <MDIO_enuSetPinValue+0xda>
    1e7c:	84 2b       	or	r24, r20
    1e7e:	8c 93       	st	X, r24
    1e80:	77 c0       	rjmp	.+238    	; 0x1f70 <MDIO_enuSetPinValue+0x1d6>
				}
			else if (MDIO_Value==MDIO_LOWHOUTPUT)
    1e82:	8c 81       	ldd	r24, Y+4	; 0x04
    1e84:	88 23       	and	r24, r24
    1e86:	09 f0       	breq	.+2      	; 0x1e8a <MDIO_enuSetPinValue+0xf0>
    1e88:	73 c0       	rjmp	.+230    	; 0x1f70 <MDIO_enuSetPinValue+0x1d6>
				{
				ClearBit(PORTB,MDIO_PINNOCPY);
    1e8a:	a8 e3       	ldi	r26, 0x38	; 56
    1e8c:	b0 e0       	ldi	r27, 0x00	; 0
    1e8e:	e8 e3       	ldi	r30, 0x38	; 56
    1e90:	f0 e0       	ldi	r31, 0x00	; 0
    1e92:	80 81       	ld	r24, Z
    1e94:	48 2f       	mov	r20, r24
    1e96:	8b 81       	ldd	r24, Y+3	; 0x03
    1e98:	28 2f       	mov	r18, r24
    1e9a:	30 e0       	ldi	r19, 0x00	; 0
    1e9c:	81 e0       	ldi	r24, 0x01	; 1
    1e9e:	90 e0       	ldi	r25, 0x00	; 0
    1ea0:	02 2e       	mov	r0, r18
    1ea2:	02 c0       	rjmp	.+4      	; 0x1ea8 <MDIO_enuSetPinValue+0x10e>
    1ea4:	88 0f       	add	r24, r24
    1ea6:	99 1f       	adc	r25, r25
    1ea8:	0a 94       	dec	r0
    1eaa:	e2 f7       	brpl	.-8      	; 0x1ea4 <MDIO_enuSetPinValue+0x10a>
    1eac:	80 95       	com	r24
    1eae:	84 23       	and	r24, r20
    1eb0:	8c 93       	st	X, r24
    1eb2:	5e c0       	rjmp	.+188    	; 0x1f70 <MDIO_enuSetPinValue+0x1d6>
				}
		break;

		case MDIO_PORTC:
			if(MDIO_Value==MDIO_HIGHOUTPUT)
    1eb4:	8c 81       	ldd	r24, Y+4	; 0x04
    1eb6:	81 30       	cpi	r24, 0x01	; 1
    1eb8:	a1 f4       	brne	.+40     	; 0x1ee2 <MDIO_enuSetPinValue+0x148>
				{
				SetBit(PORTC,MDIO_PINNOCPY);
    1eba:	a5 e3       	ldi	r26, 0x35	; 53
    1ebc:	b0 e0       	ldi	r27, 0x00	; 0
    1ebe:	e5 e3       	ldi	r30, 0x35	; 53
    1ec0:	f0 e0       	ldi	r31, 0x00	; 0
    1ec2:	80 81       	ld	r24, Z
    1ec4:	48 2f       	mov	r20, r24
    1ec6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec8:	28 2f       	mov	r18, r24
    1eca:	30 e0       	ldi	r19, 0x00	; 0
    1ecc:	81 e0       	ldi	r24, 0x01	; 1
    1ece:	90 e0       	ldi	r25, 0x00	; 0
    1ed0:	02 2e       	mov	r0, r18
    1ed2:	02 c0       	rjmp	.+4      	; 0x1ed8 <MDIO_enuSetPinValue+0x13e>
    1ed4:	88 0f       	add	r24, r24
    1ed6:	99 1f       	adc	r25, r25
    1ed8:	0a 94       	dec	r0
    1eda:	e2 f7       	brpl	.-8      	; 0x1ed4 <MDIO_enuSetPinValue+0x13a>
    1edc:	84 2b       	or	r24, r20
    1ede:	8c 93       	st	X, r24
    1ee0:	47 c0       	rjmp	.+142    	; 0x1f70 <MDIO_enuSetPinValue+0x1d6>
				}
			else if (MDIO_Value==MDIO_LOWHOUTPUT)
    1ee2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ee4:	88 23       	and	r24, r24
    1ee6:	09 f0       	breq	.+2      	; 0x1eea <MDIO_enuSetPinValue+0x150>
    1ee8:	43 c0       	rjmp	.+134    	; 0x1f70 <MDIO_enuSetPinValue+0x1d6>
				{
				ClearBit(PORTC,MDIO_PINNOCPY);
    1eea:	a5 e3       	ldi	r26, 0x35	; 53
    1eec:	b0 e0       	ldi	r27, 0x00	; 0
    1eee:	e5 e3       	ldi	r30, 0x35	; 53
    1ef0:	f0 e0       	ldi	r31, 0x00	; 0
    1ef2:	80 81       	ld	r24, Z
    1ef4:	48 2f       	mov	r20, r24
    1ef6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef8:	28 2f       	mov	r18, r24
    1efa:	30 e0       	ldi	r19, 0x00	; 0
    1efc:	81 e0       	ldi	r24, 0x01	; 1
    1efe:	90 e0       	ldi	r25, 0x00	; 0
    1f00:	02 2e       	mov	r0, r18
    1f02:	02 c0       	rjmp	.+4      	; 0x1f08 <MDIO_enuSetPinValue+0x16e>
    1f04:	88 0f       	add	r24, r24
    1f06:	99 1f       	adc	r25, r25
    1f08:	0a 94       	dec	r0
    1f0a:	e2 f7       	brpl	.-8      	; 0x1f04 <MDIO_enuSetPinValue+0x16a>
    1f0c:	80 95       	com	r24
    1f0e:	84 23       	and	r24, r20
    1f10:	8c 93       	st	X, r24
    1f12:	2e c0       	rjmp	.+92     	; 0x1f70 <MDIO_enuSetPinValue+0x1d6>
				}
			break;
		case MDIO_PORTD:
			if(MDIO_Value==MDIO_HIGHOUTPUT)
    1f14:	8c 81       	ldd	r24, Y+4	; 0x04
    1f16:	81 30       	cpi	r24, 0x01	; 1
    1f18:	a1 f4       	brne	.+40     	; 0x1f42 <MDIO_enuSetPinValue+0x1a8>
				{
				SetBit(PORTD,MDIO_PINNOCPY);
    1f1a:	a2 e3       	ldi	r26, 0x32	; 50
    1f1c:	b0 e0       	ldi	r27, 0x00	; 0
    1f1e:	e2 e3       	ldi	r30, 0x32	; 50
    1f20:	f0 e0       	ldi	r31, 0x00	; 0
    1f22:	80 81       	ld	r24, Z
    1f24:	48 2f       	mov	r20, r24
    1f26:	8b 81       	ldd	r24, Y+3	; 0x03
    1f28:	28 2f       	mov	r18, r24
    1f2a:	30 e0       	ldi	r19, 0x00	; 0
    1f2c:	81 e0       	ldi	r24, 0x01	; 1
    1f2e:	90 e0       	ldi	r25, 0x00	; 0
    1f30:	02 2e       	mov	r0, r18
    1f32:	02 c0       	rjmp	.+4      	; 0x1f38 <MDIO_enuSetPinValue+0x19e>
    1f34:	88 0f       	add	r24, r24
    1f36:	99 1f       	adc	r25, r25
    1f38:	0a 94       	dec	r0
    1f3a:	e2 f7       	brpl	.-8      	; 0x1f34 <MDIO_enuSetPinValue+0x19a>
    1f3c:	84 2b       	or	r24, r20
    1f3e:	8c 93       	st	X, r24
    1f40:	17 c0       	rjmp	.+46     	; 0x1f70 <MDIO_enuSetPinValue+0x1d6>
				}
			else if (MDIO_Value==MDIO_LOWHOUTPUT)
    1f42:	8c 81       	ldd	r24, Y+4	; 0x04
    1f44:	88 23       	and	r24, r24
    1f46:	a1 f4       	brne	.+40     	; 0x1f70 <MDIO_enuSetPinValue+0x1d6>
				{
				ClearBit(PORTD,MDIO_PINNOCPY);
    1f48:	a2 e3       	ldi	r26, 0x32	; 50
    1f4a:	b0 e0       	ldi	r27, 0x00	; 0
    1f4c:	e2 e3       	ldi	r30, 0x32	; 50
    1f4e:	f0 e0       	ldi	r31, 0x00	; 0
    1f50:	80 81       	ld	r24, Z
    1f52:	48 2f       	mov	r20, r24
    1f54:	8b 81       	ldd	r24, Y+3	; 0x03
    1f56:	28 2f       	mov	r18, r24
    1f58:	30 e0       	ldi	r19, 0x00	; 0
    1f5a:	81 e0       	ldi	r24, 0x01	; 1
    1f5c:	90 e0       	ldi	r25, 0x00	; 0
    1f5e:	02 2e       	mov	r0, r18
    1f60:	02 c0       	rjmp	.+4      	; 0x1f66 <MDIO_enuSetPinValue+0x1cc>
    1f62:	88 0f       	add	r24, r24
    1f64:	99 1f       	adc	r25, r25
    1f66:	0a 94       	dec	r0
    1f68:	e2 f7       	brpl	.-8      	; 0x1f62 <MDIO_enuSetPinValue+0x1c8>
    1f6a:	80 95       	com	r24
    1f6c:	84 23       	and	r24, r20
    1f6e:	8c 93       	st	X, r24
				}
		break;
		default:
			break;
	}
	return enuState;
    1f70:	89 81       	ldd	r24, Y+1	; 0x01
	}
    1f72:	26 96       	adiw	r28, 0x06	; 6
    1f74:	0f b6       	in	r0, 0x3f	; 63
    1f76:	f8 94       	cli
    1f78:	de bf       	out	0x3e, r29	; 62
    1f7a:	0f be       	out	0x3f, r0	; 63
    1f7c:	cd bf       	out	0x3d, r28	; 61
    1f7e:	cf 91       	pop	r28
    1f80:	df 91       	pop	r29
    1f82:	08 95       	ret

00001f84 <MDIO_enuGetPinValue>:
tenumFncErrorState MDIO_enuGetPinValue(u8 MDIO_PORTNOCPY,u8 MDIO_PINNOCPY,pu8 MDIO_Value )
{
    1f84:	df 93       	push	r29
    1f86:	cf 93       	push	r28
    1f88:	cd b7       	in	r28, 0x3d	; 61
    1f8a:	de b7       	in	r29, 0x3e	; 62
    1f8c:	27 97       	sbiw	r28, 0x07	; 7
    1f8e:	0f b6       	in	r0, 0x3f	; 63
    1f90:	f8 94       	cli
    1f92:	de bf       	out	0x3e, r29	; 62
    1f94:	0f be       	out	0x3f, r0	; 63
    1f96:	cd bf       	out	0x3d, r28	; 61
    1f98:	8a 83       	std	Y+2, r24	; 0x02
    1f9a:	6b 83       	std	Y+3, r22	; 0x03
    1f9c:	5d 83       	std	Y+5, r21	; 0x05
    1f9e:	4c 83       	std	Y+4, r20	; 0x04
tenumFncErrorState enuState=LSTY_EXECUTED_SUCCESSFULLY;
    1fa0:	19 82       	std	Y+1, r1	; 0x01
switch (MDIO_PORTNOCPY) {
    1fa2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa4:	28 2f       	mov	r18, r24
    1fa6:	30 e0       	ldi	r19, 0x00	; 0
    1fa8:	3f 83       	std	Y+7, r19	; 0x07
    1faa:	2e 83       	std	Y+6, r18	; 0x06
    1fac:	4e 81       	ldd	r20, Y+6	; 0x06
    1fae:	5f 81       	ldd	r21, Y+7	; 0x07
    1fb0:	41 30       	cpi	r20, 0x01	; 1
    1fb2:	51 05       	cpc	r21, r1
    1fb4:	59 f1       	breq	.+86     	; 0x200c <MDIO_enuGetPinValue+0x88>
    1fb6:	8e 81       	ldd	r24, Y+6	; 0x06
    1fb8:	9f 81       	ldd	r25, Y+7	; 0x07
    1fba:	82 30       	cpi	r24, 0x02	; 2
    1fbc:	91 05       	cpc	r25, r1
    1fbe:	34 f4       	brge	.+12     	; 0x1fcc <MDIO_enuGetPinValue+0x48>
    1fc0:	2e 81       	ldd	r18, Y+6	; 0x06
    1fc2:	3f 81       	ldd	r19, Y+7	; 0x07
    1fc4:	21 15       	cp	r18, r1
    1fc6:	31 05       	cpc	r19, r1
    1fc8:	69 f0       	breq	.+26     	; 0x1fe4 <MDIO_enuGetPinValue+0x60>
    1fca:	5b c0       	rjmp	.+182    	; 0x2082 <MDIO_enuGetPinValue+0xfe>
    1fcc:	4e 81       	ldd	r20, Y+6	; 0x06
    1fce:	5f 81       	ldd	r21, Y+7	; 0x07
    1fd0:	42 30       	cpi	r20, 0x02	; 2
    1fd2:	51 05       	cpc	r21, r1
    1fd4:	79 f1       	breq	.+94     	; 0x2034 <MDIO_enuGetPinValue+0xb0>
    1fd6:	8e 81       	ldd	r24, Y+6	; 0x06
    1fd8:	9f 81       	ldd	r25, Y+7	; 0x07
    1fda:	83 30       	cpi	r24, 0x03	; 3
    1fdc:	91 05       	cpc	r25, r1
    1fde:	09 f4       	brne	.+2      	; 0x1fe2 <MDIO_enuGetPinValue+0x5e>
    1fe0:	3d c0       	rjmp	.+122    	; 0x205c <MDIO_enuGetPinValue+0xd8>
    1fe2:	4f c0       	rjmp	.+158    	; 0x2082 <MDIO_enuGetPinValue+0xfe>
	  case MDIO_PORTA:
	  *(MDIO_Value)=GetBit(PINA,MDIO_PINNOCPY);
    1fe4:	e9 e3       	ldi	r30, 0x39	; 57
    1fe6:	f0 e0       	ldi	r31, 0x00	; 0
    1fe8:	80 81       	ld	r24, Z
    1fea:	28 2f       	mov	r18, r24
    1fec:	30 e0       	ldi	r19, 0x00	; 0
    1fee:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff0:	88 2f       	mov	r24, r24
    1ff2:	90 e0       	ldi	r25, 0x00	; 0
    1ff4:	a9 01       	movw	r20, r18
    1ff6:	02 c0       	rjmp	.+4      	; 0x1ffc <MDIO_enuGetPinValue+0x78>
    1ff8:	55 95       	asr	r21
    1ffa:	47 95       	ror	r20
    1ffc:	8a 95       	dec	r24
    1ffe:	e2 f7       	brpl	.-8      	; 0x1ff8 <MDIO_enuGetPinValue+0x74>
    2000:	ca 01       	movw	r24, r20
    2002:	81 70       	andi	r24, 0x01	; 1
    2004:	ec 81       	ldd	r30, Y+4	; 0x04
    2006:	fd 81       	ldd	r31, Y+5	; 0x05
    2008:	80 83       	st	Z, r24
    200a:	3b c0       	rjmp	.+118    	; 0x2082 <MDIO_enuGetPinValue+0xfe>
	  break;
	  case MDIO_PORTB:
	  	  *(MDIO_Value)=GetBit(PINB,MDIO_PINNOCPY);
    200c:	e6 e3       	ldi	r30, 0x36	; 54
    200e:	f0 e0       	ldi	r31, 0x00	; 0
    2010:	80 81       	ld	r24, Z
    2012:	28 2f       	mov	r18, r24
    2014:	30 e0       	ldi	r19, 0x00	; 0
    2016:	8b 81       	ldd	r24, Y+3	; 0x03
    2018:	88 2f       	mov	r24, r24
    201a:	90 e0       	ldi	r25, 0x00	; 0
    201c:	a9 01       	movw	r20, r18
    201e:	02 c0       	rjmp	.+4      	; 0x2024 <MDIO_enuGetPinValue+0xa0>
    2020:	55 95       	asr	r21
    2022:	47 95       	ror	r20
    2024:	8a 95       	dec	r24
    2026:	e2 f7       	brpl	.-8      	; 0x2020 <MDIO_enuGetPinValue+0x9c>
    2028:	ca 01       	movw	r24, r20
    202a:	81 70       	andi	r24, 0x01	; 1
    202c:	ec 81       	ldd	r30, Y+4	; 0x04
    202e:	fd 81       	ldd	r31, Y+5	; 0x05
    2030:	80 83       	st	Z, r24
    2032:	27 c0       	rjmp	.+78     	; 0x2082 <MDIO_enuGetPinValue+0xfe>
	  	  break;
	  case MDIO_PORTC:
	  	  *(MDIO_Value)=GetBit(PINC,MDIO_PINNOCPY);
    2034:	e3 e3       	ldi	r30, 0x33	; 51
    2036:	f0 e0       	ldi	r31, 0x00	; 0
    2038:	80 81       	ld	r24, Z
    203a:	28 2f       	mov	r18, r24
    203c:	30 e0       	ldi	r19, 0x00	; 0
    203e:	8b 81       	ldd	r24, Y+3	; 0x03
    2040:	88 2f       	mov	r24, r24
    2042:	90 e0       	ldi	r25, 0x00	; 0
    2044:	a9 01       	movw	r20, r18
    2046:	02 c0       	rjmp	.+4      	; 0x204c <MDIO_enuGetPinValue+0xc8>
    2048:	55 95       	asr	r21
    204a:	47 95       	ror	r20
    204c:	8a 95       	dec	r24
    204e:	e2 f7       	brpl	.-8      	; 0x2048 <MDIO_enuGetPinValue+0xc4>
    2050:	ca 01       	movw	r24, r20
    2052:	81 70       	andi	r24, 0x01	; 1
    2054:	ec 81       	ldd	r30, Y+4	; 0x04
    2056:	fd 81       	ldd	r31, Y+5	; 0x05
    2058:	80 83       	st	Z, r24
    205a:	13 c0       	rjmp	.+38     	; 0x2082 <MDIO_enuGetPinValue+0xfe>
	  	  break;
	  case MDIO_PORTD:
	  	  *(MDIO_Value)=GetBit(PIND,MDIO_PINNOCPY);
    205c:	e0 e3       	ldi	r30, 0x30	; 48
    205e:	f0 e0       	ldi	r31, 0x00	; 0
    2060:	80 81       	ld	r24, Z
    2062:	28 2f       	mov	r18, r24
    2064:	30 e0       	ldi	r19, 0x00	; 0
    2066:	8b 81       	ldd	r24, Y+3	; 0x03
    2068:	88 2f       	mov	r24, r24
    206a:	90 e0       	ldi	r25, 0x00	; 0
    206c:	a9 01       	movw	r20, r18
    206e:	02 c0       	rjmp	.+4      	; 0x2074 <MDIO_enuGetPinValue+0xf0>
    2070:	55 95       	asr	r21
    2072:	47 95       	ror	r20
    2074:	8a 95       	dec	r24
    2076:	e2 f7       	brpl	.-8      	; 0x2070 <MDIO_enuGetPinValue+0xec>
    2078:	ca 01       	movw	r24, r20
    207a:	81 70       	andi	r24, 0x01	; 1
    207c:	ec 81       	ldd	r30, Y+4	; 0x04
    207e:	fd 81       	ldd	r31, Y+5	; 0x05
    2080:	80 83       	st	Z, r24
	  	  break;
	  default:
		  break;
}

  return enuState;
    2082:	89 81       	ldd	r24, Y+1	; 0x01


}
    2084:	27 96       	adiw	r28, 0x07	; 7
    2086:	0f b6       	in	r0, 0x3f	; 63
    2088:	f8 94       	cli
    208a:	de bf       	out	0x3e, r29	; 62
    208c:	0f be       	out	0x3f, r0	; 63
    208e:	cd bf       	out	0x3d, r28	; 61
    2090:	cf 91       	pop	r28
    2092:	df 91       	pop	r29
    2094:	08 95       	ret

00002096 <MDIO_enuSetPORTDir>:
tenumFncErrorState MDIO_enuSetPORTDir(u8 MDIO_PORTNOCPY,u8 MDIO_DIR )
{ tenumFncErrorState enu_State=LSTY_EXECUTED_SUCCESSFULLY;
    2096:	df 93       	push	r29
    2098:	cf 93       	push	r28
    209a:	00 d0       	rcall	.+0      	; 0x209c <MDIO_enuSetPORTDir+0x6>
    209c:	0f 92       	push	r0
    209e:	cd b7       	in	r28, 0x3d	; 61
    20a0:	de b7       	in	r29, 0x3e	; 62
    20a2:	8a 83       	std	Y+2, r24	; 0x02
    20a4:	6b 83       	std	Y+3, r22	; 0x03
    20a6:	19 82       	std	Y+1, r1	; 0x01
	switch (MDIO_PORTNOCPY) {
    20a8:	8a 81       	ldd	r24, Y+2	; 0x02
    20aa:	88 2f       	mov	r24, r24
    20ac:	90 e0       	ldi	r25, 0x00	; 0
    20ae:	00 97       	sbiw	r24, 0x00	; 0
    20b0:	21 f4       	brne	.+8      	; 0x20ba <MDIO_enuSetPORTDir+0x24>
		case MDIO_PORTA:
			DDRA=MDIO_DIR;
    20b2:	ea e3       	ldi	r30, 0x3A	; 58
    20b4:	f0 e0       	ldi	r31, 0x00	; 0
    20b6:	8b 81       	ldd	r24, Y+3	; 0x03
    20b8:	80 83       	st	Z, r24
		break;
		default:
			break;

}
return enu_State;
    20ba:	89 81       	ldd	r24, Y+1	; 0x01
}
    20bc:	0f 90       	pop	r0
    20be:	0f 90       	pop	r0
    20c0:	0f 90       	pop	r0
    20c2:	cf 91       	pop	r28
    20c4:	df 91       	pop	r29
    20c6:	08 95       	ret

000020c8 <MDIO_enuSetPORTValue>:
tenumFncErrorState MDIO_enuSetPORTValue(u8 MDIO_PORTNOCPY,u8 MDIO_Value )
{ tenumFncErrorState enu_State=LSTY_EXECUTED_SUCCESSFULLY;
    20c8:	df 93       	push	r29
    20ca:	cf 93       	push	r28
    20cc:	00 d0       	rcall	.+0      	; 0x20ce <MDIO_enuSetPORTValue+0x6>
    20ce:	0f 92       	push	r0
    20d0:	cd b7       	in	r28, 0x3d	; 61
    20d2:	de b7       	in	r29, 0x3e	; 62
    20d4:	8a 83       	std	Y+2, r24	; 0x02
    20d6:	6b 83       	std	Y+3, r22	; 0x03
    20d8:	19 82       	std	Y+1, r1	; 0x01
	switch (MDIO_PORTNOCPY) {
    20da:	8a 81       	ldd	r24, Y+2	; 0x02
    20dc:	88 2f       	mov	r24, r24
    20de:	90 e0       	ldi	r25, 0x00	; 0
    20e0:	00 97       	sbiw	r24, 0x00	; 0
    20e2:	21 f4       	brne	.+8      	; 0x20ec <MDIO_enuSetPORTValue+0x24>
		case MDIO_PORTA:
			PORTA=MDIO_Value;
    20e4:	eb e3       	ldi	r30, 0x3B	; 59
    20e6:	f0 e0       	ldi	r31, 0x00	; 0
    20e8:	8b 81       	ldd	r24, Y+3	; 0x03
    20ea:	80 83       	st	Z, r24
		break;
		default:
			break;

}
return enu_State;
    20ec:	89 81       	ldd	r24, Y+1	; 0x01
}
    20ee:	0f 90       	pop	r0
    20f0:	0f 90       	pop	r0
    20f2:	0f 90       	pop	r0
    20f4:	cf 91       	pop	r28
    20f6:	df 91       	pop	r29
    20f8:	08 95       	ret

000020fa <MDIO_enuGetPORTValue>:
tenumFncErrorState MDIO_enuGetPORTValue(u8 MDIO_PORTNOCPY,pu8 MDIO_Value )

{ tenumFncErrorState enu_State=LSTY_EXECUTED_SUCCESSFULLY;
    20fa:	df 93       	push	r29
    20fc:	cf 93       	push	r28
    20fe:	00 d0       	rcall	.+0      	; 0x2100 <MDIO_enuGetPORTValue+0x6>
    2100:	00 d0       	rcall	.+0      	; 0x2102 <MDIO_enuGetPORTValue+0x8>
    2102:	cd b7       	in	r28, 0x3d	; 61
    2104:	de b7       	in	r29, 0x3e	; 62
    2106:	8a 83       	std	Y+2, r24	; 0x02
    2108:	7c 83       	std	Y+4, r23	; 0x04
    210a:	6b 83       	std	Y+3, r22	; 0x03
    210c:	19 82       	std	Y+1, r1	; 0x01
	switch (MDIO_PORTNOCPY) {
    210e:	8a 81       	ldd	r24, Y+2	; 0x02
    2110:	88 2f       	mov	r24, r24
    2112:	90 e0       	ldi	r25, 0x00	; 0
    2114:	00 97       	sbiw	r24, 0x00	; 0
    2116:	31 f4       	brne	.+12     	; 0x2124 <MDIO_enuGetPORTValue+0x2a>
		case MDIO_PORTA:
			*(MDIO_Value)=PINA;
    2118:	e9 e3       	ldi	r30, 0x39	; 57
    211a:	f0 e0       	ldi	r31, 0x00	; 0
    211c:	80 81       	ld	r24, Z
    211e:	eb 81       	ldd	r30, Y+3	; 0x03
    2120:	fc 81       	ldd	r31, Y+4	; 0x04
    2122:	80 83       	st	Z, r24
		break;
		default:
			break;

}
return enu_State;
    2124:	89 81       	ldd	r24, Y+1	; 0x01
}
    2126:	0f 90       	pop	r0
    2128:	0f 90       	pop	r0
    212a:	0f 90       	pop	r0
    212c:	0f 90       	pop	r0
    212e:	cf 91       	pop	r28
    2130:	df 91       	pop	r29
    2132:	08 95       	ret

00002134 <CALC_Num>:
#include "CSWC_PLT_MCU_ATMEGA32/MDIO/MDIO_Config.h"
#include "CSWC_PLT_MCU_ATMEGA32/MINT/MINT_inteface.h"
#include "HKPAD/HKPAD_Interface.h"
#include "HLCD/HLCD_int.h"

u8 CALC_Num(u8 keypad) {
    2134:	df 93       	push	r29
    2136:	cf 93       	push	r28
    2138:	00 d0       	rcall	.+0      	; 0x213a <CALC_Num+0x6>
    213a:	00 d0       	rcall	.+0      	; 0x213c <CALC_Num+0x8>
    213c:	cd b7       	in	r28, 0x3d	; 61
    213e:	de b7       	in	r29, 0x3e	; 62
    2140:	8a 83       	std	Y+2, r24	; 0x02

	u8 value;
	switch (keypad)
    2142:	8a 81       	ldd	r24, Y+2	; 0x02
    2144:	28 2f       	mov	r18, r24
    2146:	30 e0       	ldi	r19, 0x00	; 0
    2148:	3c 83       	std	Y+4, r19	; 0x04
    214a:	2b 83       	std	Y+3, r18	; 0x03
    214c:	8b 81       	ldd	r24, Y+3	; 0x03
    214e:	9c 81       	ldd	r25, Y+4	; 0x04
    2150:	87 30       	cpi	r24, 0x07	; 7
    2152:	91 05       	cpc	r25, r1
    2154:	09 f4       	brne	.+2      	; 0x2158 <CALC_Num+0x24>
    2156:	6f c0       	rjmp	.+222    	; 0x2236 <CALC_Num+0x102>
    2158:	2b 81       	ldd	r18, Y+3	; 0x03
    215a:	3c 81       	ldd	r19, Y+4	; 0x04
    215c:	28 30       	cpi	r18, 0x08	; 8
    215e:	31 05       	cpc	r19, r1
    2160:	54 f5       	brge	.+84     	; 0x21b6 <CALC_Num+0x82>
    2162:	8b 81       	ldd	r24, Y+3	; 0x03
    2164:	9c 81       	ldd	r25, Y+4	; 0x04
    2166:	83 30       	cpi	r24, 0x03	; 3
    2168:	91 05       	cpc	r25, r1
    216a:	09 f4       	brne	.+2      	; 0x216e <CALC_Num+0x3a>
    216c:	58 c0       	rjmp	.+176    	; 0x221e <CALC_Num+0xea>
    216e:	2b 81       	ldd	r18, Y+3	; 0x03
    2170:	3c 81       	ldd	r19, Y+4	; 0x04
    2172:	24 30       	cpi	r18, 0x04	; 4
    2174:	31 05       	cpc	r19, r1
    2176:	94 f4       	brge	.+36     	; 0x219c <CALC_Num+0x68>
    2178:	8b 81       	ldd	r24, Y+3	; 0x03
    217a:	9c 81       	ldd	r25, Y+4	; 0x04
    217c:	81 30       	cpi	r24, 0x01	; 1
    217e:	91 05       	cpc	r25, r1
    2180:	09 f4       	brne	.+2      	; 0x2184 <CALC_Num+0x50>
    2182:	47 c0       	rjmp	.+142    	; 0x2212 <CALC_Num+0xde>
    2184:	2b 81       	ldd	r18, Y+3	; 0x03
    2186:	3c 81       	ldd	r19, Y+4	; 0x04
    2188:	22 30       	cpi	r18, 0x02	; 2
    218a:	31 05       	cpc	r19, r1
    218c:	0c f0       	brlt	.+2      	; 0x2190 <CALC_Num+0x5c>
    218e:	44 c0       	rjmp	.+136    	; 0x2218 <CALC_Num+0xe4>
    2190:	8b 81       	ldd	r24, Y+3	; 0x03
    2192:	9c 81       	ldd	r25, Y+4	; 0x04
    2194:	00 97       	sbiw	r24, 0x00	; 0
    2196:	09 f4       	brne	.+2      	; 0x219a <CALC_Num+0x66>
    2198:	39 c0       	rjmp	.+114    	; 0x220c <CALC_Num+0xd8>
    219a:	67 c0       	rjmp	.+206    	; 0x226a <CALC_Num+0x136>
    219c:	2b 81       	ldd	r18, Y+3	; 0x03
    219e:	3c 81       	ldd	r19, Y+4	; 0x04
    21a0:	25 30       	cpi	r18, 0x05	; 5
    21a2:	31 05       	cpc	r19, r1
    21a4:	09 f4       	brne	.+2      	; 0x21a8 <CALC_Num+0x74>
    21a6:	41 c0       	rjmp	.+130    	; 0x222a <CALC_Num+0xf6>
    21a8:	8b 81       	ldd	r24, Y+3	; 0x03
    21aa:	9c 81       	ldd	r25, Y+4	; 0x04
    21ac:	86 30       	cpi	r24, 0x06	; 6
    21ae:	91 05       	cpc	r25, r1
    21b0:	0c f0       	brlt	.+2      	; 0x21b4 <CALC_Num+0x80>
    21b2:	3e c0       	rjmp	.+124    	; 0x2230 <CALC_Num+0xfc>
    21b4:	37 c0       	rjmp	.+110    	; 0x2224 <CALC_Num+0xf0>
    21b6:	2b 81       	ldd	r18, Y+3	; 0x03
    21b8:	3c 81       	ldd	r19, Y+4	; 0x04
    21ba:	2b 30       	cpi	r18, 0x0B	; 11
    21bc:	31 05       	cpc	r19, r1
    21be:	09 f4       	brne	.+2      	; 0x21c2 <CALC_Num+0x8e>
    21c0:	46 c0       	rjmp	.+140    	; 0x224e <CALC_Num+0x11a>
    21c2:	8b 81       	ldd	r24, Y+3	; 0x03
    21c4:	9c 81       	ldd	r25, Y+4	; 0x04
    21c6:	8c 30       	cpi	r24, 0x0C	; 12
    21c8:	91 05       	cpc	r25, r1
    21ca:	5c f4       	brge	.+22     	; 0x21e2 <CALC_Num+0xae>
    21cc:	2b 81       	ldd	r18, Y+3	; 0x03
    21ce:	3c 81       	ldd	r19, Y+4	; 0x04
    21d0:	29 30       	cpi	r18, 0x09	; 9
    21d2:	31 05       	cpc	r19, r1
    21d4:	b1 f1       	breq	.+108    	; 0x2242 <CALC_Num+0x10e>
    21d6:	8b 81       	ldd	r24, Y+3	; 0x03
    21d8:	9c 81       	ldd	r25, Y+4	; 0x04
    21da:	8a 30       	cpi	r24, 0x0A	; 10
    21dc:	91 05       	cpc	r25, r1
    21de:	a4 f5       	brge	.+104    	; 0x2248 <CALC_Num+0x114>
    21e0:	2d c0       	rjmp	.+90     	; 0x223c <CALC_Num+0x108>
    21e2:	2b 81       	ldd	r18, Y+3	; 0x03
    21e4:	3c 81       	ldd	r19, Y+4	; 0x04
    21e6:	2d 30       	cpi	r18, 0x0D	; 13
    21e8:	31 05       	cpc	r19, r1
    21ea:	b9 f1       	breq	.+110    	; 0x225a <CALC_Num+0x126>
    21ec:	8b 81       	ldd	r24, Y+3	; 0x03
    21ee:	9c 81       	ldd	r25, Y+4	; 0x04
    21f0:	8d 30       	cpi	r24, 0x0D	; 13
    21f2:	91 05       	cpc	r25, r1
    21f4:	7c f1       	brlt	.+94     	; 0x2254 <CALC_Num+0x120>
    21f6:	2b 81       	ldd	r18, Y+3	; 0x03
    21f8:	3c 81       	ldd	r19, Y+4	; 0x04
    21fa:	2e 30       	cpi	r18, 0x0E	; 14
    21fc:	31 05       	cpc	r19, r1
    21fe:	81 f1       	breq	.+96     	; 0x2260 <CALC_Num+0x12c>
    2200:	8b 81       	ldd	r24, Y+3	; 0x03
    2202:	9c 81       	ldd	r25, Y+4	; 0x04
    2204:	8f 30       	cpi	r24, 0x0F	; 15
    2206:	91 05       	cpc	r25, r1
    2208:	71 f1       	breq	.+92     	; 0x2266 <CALC_Num+0x132>
    220a:	2f c0       	rjmp	.+94     	; 0x226a <CALC_Num+0x136>
	{
	case 0:
		 value='7';
    220c:	87 e3       	ldi	r24, 0x37	; 55
    220e:	89 83       	std	Y+1, r24	; 0x01
    2210:	2c c0       	rjmp	.+88     	; 0x226a <CALC_Num+0x136>
		break;
	case 1:
		value='8';
    2212:	88 e3       	ldi	r24, 0x38	; 56
    2214:	89 83       	std	Y+1, r24	; 0x01
    2216:	29 c0       	rjmp	.+82     	; 0x226a <CALC_Num+0x136>
		break;
	case 2:
		 value='9';
    2218:	89 e3       	ldi	r24, 0x39	; 57
    221a:	89 83       	std	Y+1, r24	; 0x01
    221c:	26 c0       	rjmp	.+76     	; 0x226a <CALC_Num+0x136>
		break;
	case 3:
		value='/';
    221e:	8f e2       	ldi	r24, 0x2F	; 47
    2220:	89 83       	std	Y+1, r24	; 0x01
    2222:	23 c0       	rjmp	.+70     	; 0x226a <CALC_Num+0x136>
		break;
	case 4:
		 value='4';
    2224:	84 e3       	ldi	r24, 0x34	; 52
    2226:	89 83       	std	Y+1, r24	; 0x01
    2228:	20 c0       	rjmp	.+64     	; 0x226a <CALC_Num+0x136>
		break;
	case 5:
		value='5';
    222a:	85 e3       	ldi	r24, 0x35	; 53
    222c:	89 83       	std	Y+1, r24	; 0x01
    222e:	1d c0       	rjmp	.+58     	; 0x226a <CALC_Num+0x136>
		break;
	case 6:
		 value='6';
    2230:	86 e3       	ldi	r24, 0x36	; 54
    2232:	89 83       	std	Y+1, r24	; 0x01
    2234:	1a c0       	rjmp	.+52     	; 0x226a <CALC_Num+0x136>
		break;
	case 7:
		value='*';
    2236:	8a e2       	ldi	r24, 0x2A	; 42
    2238:	89 83       	std	Y+1, r24	; 0x01
    223a:	17 c0       	rjmp	.+46     	; 0x226a <CALC_Num+0x136>
		break;
	case 8:
		 value='1';
    223c:	81 e3       	ldi	r24, 0x31	; 49
    223e:	89 83       	std	Y+1, r24	; 0x01
    2240:	14 c0       	rjmp	.+40     	; 0x226a <CALC_Num+0x136>
		break;
	case 9:
		value='2';
    2242:	82 e3       	ldi	r24, 0x32	; 50
    2244:	89 83       	std	Y+1, r24	; 0x01
    2246:	11 c0       	rjmp	.+34     	; 0x226a <CALC_Num+0x136>
		break;
	case 10:
		value='3';
    2248:	83 e3       	ldi	r24, 0x33	; 51
    224a:	89 83       	std	Y+1, r24	; 0x01
    224c:	0e c0       	rjmp	.+28     	; 0x226a <CALC_Num+0x136>
		break;
	case 11:
			value='-';
    224e:	8d e2       	ldi	r24, 0x2D	; 45
    2250:	89 83       	std	Y+1, r24	; 0x01
    2252:	0b c0       	rjmp	.+22     	; 0x226a <CALC_Num+0x136>
			break;
	case 12:
		value='a';
    2254:	81 e6       	ldi	r24, 0x61	; 97
    2256:	89 83       	std	Y+1, r24	; 0x01
    2258:	08 c0       	rjmp	.+16     	; 0x226a <CALC_Num+0x136>
			break;
	case 13:
			value='0';
    225a:	80 e3       	ldi	r24, 0x30	; 48
    225c:	89 83       	std	Y+1, r24	; 0x01
    225e:	05 c0       	rjmp	.+10     	; 0x226a <CALC_Num+0x136>
			break;
	case 14:
			value='=';
    2260:	8d e3       	ldi	r24, 0x3D	; 61
    2262:	89 83       	std	Y+1, r24	; 0x01
    2264:	02 c0       	rjmp	.+4      	; 0x226a <CALC_Num+0x136>
			break;
	case 15:
			value='+';
    2266:	8b e2       	ldi	r24, 0x2B	; 43
    2268:	89 83       	std	Y+1, r24	; 0x01
			break;
	}
	return value;
    226a:	89 81       	ldd	r24, Y+1	; 0x01
}
    226c:	0f 90       	pop	r0
    226e:	0f 90       	pop	r0
    2270:	0f 90       	pop	r0
    2272:	0f 90       	pop	r0
    2274:	cf 91       	pop	r28
    2276:	df 91       	pop	r29
    2278:	08 95       	ret

0000227a <pow>:
u16 pow(u16 number,u16 power)
{
    227a:	df 93       	push	r29
    227c:	cf 93       	push	r28
    227e:	cd b7       	in	r28, 0x3d	; 61
    2280:	de b7       	in	r29, 0x3e	; 62
    2282:	28 97       	sbiw	r28, 0x08	; 8
    2284:	0f b6       	in	r0, 0x3f	; 63
    2286:	f8 94       	cli
    2288:	de bf       	out	0x3e, r29	; 62
    228a:	0f be       	out	0x3f, r0	; 63
    228c:	cd bf       	out	0x3d, r28	; 61
    228e:	9e 83       	std	Y+6, r25	; 0x06
    2290:	8d 83       	std	Y+5, r24	; 0x05
    2292:	78 87       	std	Y+8, r23	; 0x08
    2294:	6f 83       	std	Y+7, r22	; 0x07
u16 value=0;
    2296:	1c 82       	std	Y+4, r1	; 0x04
    2298:	1b 82       	std	Y+3, r1	; 0x03
for(u16 i=0;i<=power;i++)
    229a:	1a 82       	std	Y+2, r1	; 0x02
    229c:	19 82       	std	Y+1, r1	; 0x01
    229e:	1c c0       	rjmp	.+56     	; 0x22d8 <pow+0x5e>
{
if (i==0)
    22a0:	89 81       	ldd	r24, Y+1	; 0x01
    22a2:	9a 81       	ldd	r25, Y+2	; 0x02
    22a4:	00 97       	sbiw	r24, 0x00	; 0
    22a6:	29 f4       	brne	.+10     	; 0x22b2 <pow+0x38>
	value=1;
    22a8:	81 e0       	ldi	r24, 0x01	; 1
    22aa:	90 e0       	ldi	r25, 0x00	; 0
    22ac:	9c 83       	std	Y+4, r25	; 0x04
    22ae:	8b 83       	std	Y+3, r24	; 0x03
    22b0:	0e c0       	rjmp	.+28     	; 0x22ce <pow+0x54>
else
value*=number;
    22b2:	8b 81       	ldd	r24, Y+3	; 0x03
    22b4:	9c 81       	ldd	r25, Y+4	; 0x04
    22b6:	2d 81       	ldd	r18, Y+5	; 0x05
    22b8:	3e 81       	ldd	r19, Y+6	; 0x06
    22ba:	ac 01       	movw	r20, r24
    22bc:	42 9f       	mul	r20, r18
    22be:	c0 01       	movw	r24, r0
    22c0:	43 9f       	mul	r20, r19
    22c2:	90 0d       	add	r25, r0
    22c4:	52 9f       	mul	r21, r18
    22c6:	90 0d       	add	r25, r0
    22c8:	11 24       	eor	r1, r1
    22ca:	9c 83       	std	Y+4, r25	; 0x04
    22cc:	8b 83       	std	Y+3, r24	; 0x03
	return value;
}
u16 pow(u16 number,u16 power)
{
u16 value=0;
for(u16 i=0;i<=power;i++)
    22ce:	89 81       	ldd	r24, Y+1	; 0x01
    22d0:	9a 81       	ldd	r25, Y+2	; 0x02
    22d2:	01 96       	adiw	r24, 0x01	; 1
    22d4:	9a 83       	std	Y+2, r25	; 0x02
    22d6:	89 83       	std	Y+1, r24	; 0x01
    22d8:	29 81       	ldd	r18, Y+1	; 0x01
    22da:	3a 81       	ldd	r19, Y+2	; 0x02
    22dc:	8f 81       	ldd	r24, Y+7	; 0x07
    22de:	98 85       	ldd	r25, Y+8	; 0x08
    22e0:	82 17       	cp	r24, r18
    22e2:	93 07       	cpc	r25, r19
    22e4:	e8 f6       	brcc	.-70     	; 0x22a0 <pow+0x26>
if (i==0)
	value=1;
else
value*=number;
	}
return value;
    22e6:	8b 81       	ldd	r24, Y+3	; 0x03
    22e8:	9c 81       	ldd	r25, Y+4	; 0x04
}
    22ea:	28 96       	adiw	r28, 0x08	; 8
    22ec:	0f b6       	in	r0, 0x3f	; 63
    22ee:	f8 94       	cli
    22f0:	de bf       	out	0x3e, r29	; 62
    22f2:	0f be       	out	0x3f, r0	; 63
    22f4:	cd bf       	out	0x3d, r28	; 61
    22f6:	cf 91       	pop	r28
    22f8:	df 91       	pop	r29
    22fa:	08 95       	ret

000022fc <Calc_Convert_to_number>:
u16 Calc_Convert_to_number(u8* ptrarr,u8 size_of_arr)
{
    22fc:	0f 93       	push	r16
    22fe:	1f 93       	push	r17
    2300:	df 93       	push	r29
    2302:	cf 93       	push	r28
    2304:	00 d0       	rcall	.+0      	; 0x2306 <Calc_Convert_to_number+0xa>
    2306:	00 d0       	rcall	.+0      	; 0x2308 <Calc_Convert_to_number+0xc>
    2308:	00 d0       	rcall	.+0      	; 0x230a <Calc_Convert_to_number+0xe>
    230a:	cd b7       	in	r28, 0x3d	; 61
    230c:	de b7       	in	r29, 0x3e	; 62
    230e:	9d 83       	std	Y+5, r25	; 0x05
    2310:	8c 83       	std	Y+4, r24	; 0x04
    2312:	6e 83       	std	Y+6, r22	; 0x06
	u16 value=0;
    2314:	1b 82       	std	Y+3, r1	; 0x03
    2316:	1a 82       	std	Y+2, r1	; 0x02
for(u8 i=0;i<=size_of_arr;i++)
    2318:	19 82       	std	Y+1, r1	; 0x01
    231a:	2b c0       	rjmp	.+86     	; 0x2372 <Calc_Convert_to_number+0x76>
{
	value=value+(((ptrarr[i]))*(pow(10,size_of_arr-i)));
    231c:	89 81       	ldd	r24, Y+1	; 0x01
    231e:	28 2f       	mov	r18, r24
    2320:	30 e0       	ldi	r19, 0x00	; 0
    2322:	8c 81       	ldd	r24, Y+4	; 0x04
    2324:	9d 81       	ldd	r25, Y+5	; 0x05
    2326:	fc 01       	movw	r30, r24
    2328:	e2 0f       	add	r30, r18
    232a:	f3 1f       	adc	r31, r19
    232c:	80 81       	ld	r24, Z
    232e:	08 2f       	mov	r16, r24
    2330:	10 e0       	ldi	r17, 0x00	; 0
    2332:	8e 81       	ldd	r24, Y+6	; 0x06
    2334:	28 2f       	mov	r18, r24
    2336:	30 e0       	ldi	r19, 0x00	; 0
    2338:	89 81       	ldd	r24, Y+1	; 0x01
    233a:	88 2f       	mov	r24, r24
    233c:	90 e0       	ldi	r25, 0x00	; 0
    233e:	a9 01       	movw	r20, r18
    2340:	48 1b       	sub	r20, r24
    2342:	59 0b       	sbc	r21, r25
    2344:	ca 01       	movw	r24, r20
    2346:	9c 01       	movw	r18, r24
    2348:	8a e0       	ldi	r24, 0x0A	; 10
    234a:	90 e0       	ldi	r25, 0x00	; 0
    234c:	b9 01       	movw	r22, r18
    234e:	0e 94 3d 11 	call	0x227a	; 0x227a <pow>
    2352:	08 9f       	mul	r16, r24
    2354:	90 01       	movw	r18, r0
    2356:	09 9f       	mul	r16, r25
    2358:	30 0d       	add	r19, r0
    235a:	18 9f       	mul	r17, r24
    235c:	30 0d       	add	r19, r0
    235e:	11 24       	eor	r1, r1
    2360:	8a 81       	ldd	r24, Y+2	; 0x02
    2362:	9b 81       	ldd	r25, Y+3	; 0x03
    2364:	82 0f       	add	r24, r18
    2366:	93 1f       	adc	r25, r19
    2368:	9b 83       	std	Y+3, r25	; 0x03
    236a:	8a 83       	std	Y+2, r24	; 0x02
return value;
}
u16 Calc_Convert_to_number(u8* ptrarr,u8 size_of_arr)
{
	u16 value=0;
for(u8 i=0;i<=size_of_arr;i++)
    236c:	89 81       	ldd	r24, Y+1	; 0x01
    236e:	8f 5f       	subi	r24, 0xFF	; 255
    2370:	89 83       	std	Y+1, r24	; 0x01
    2372:	99 81       	ldd	r25, Y+1	; 0x01
    2374:	8e 81       	ldd	r24, Y+6	; 0x06
    2376:	89 17       	cp	r24, r25
    2378:	88 f6       	brcc	.-94     	; 0x231c <Calc_Convert_to_number+0x20>
{
	value=value+(((ptrarr[i]))*(pow(10,size_of_arr-i)));

}
return value;
    237a:	8a 81       	ldd	r24, Y+2	; 0x02
    237c:	9b 81       	ldd	r25, Y+3	; 0x03

}
    237e:	26 96       	adiw	r28, 0x06	; 6
    2380:	0f b6       	in	r0, 0x3f	; 63
    2382:	f8 94       	cli
    2384:	de bf       	out	0x3e, r29	; 62
    2386:	0f be       	out	0x3f, r0	; 63
    2388:	cd bf       	out	0x3d, r28	; 61
    238a:	cf 91       	pop	r28
    238c:	df 91       	pop	r29
    238e:	1f 91       	pop	r17
    2390:	0f 91       	pop	r16
    2392:	08 95       	ret

00002394 <main>:
#include<stdio.h>
#include<stdlib.h>
#include "main.h"

int main() {
    2394:	df 93       	push	r29
    2396:	cf 93       	push	r28
    2398:	cd b7       	in	r28, 0x3d	; 61
    239a:	de b7       	in	r29, 0x3e	; 62
    239c:	68 97       	sbiw	r28, 0x18	; 24
    239e:	0f b6       	in	r0, 0x3f	; 63
    23a0:	f8 94       	cli
    23a2:	de bf       	out	0x3e, r29	; 62
    23a4:	0f be       	out	0x3f, r0	; 63
    23a6:	cd bf       	out	0x3d, r28	; 61
	u16 sum1 = 0;
    23a8:	1a 86       	std	Y+10, r1	; 0x0a
    23aa:	19 86       	std	Y+9, r1	; 0x09
	u16 sum2 = 0;
    23ac:	18 86       	std	Y+8, r1	; 0x08
    23ae:	1f 82       	std	Y+7, r1	; 0x07
	u8 arr[10];
	u16 sum;
	u8 chtoint;
	u8 i = 0;
    23b0:	1b 82       	std	Y+3, r1	; 0x03
	u8 f = 0;
    23b2:	1a 82       	std	Y+2, r1	; 0x02
	u8 operator;

	u8 value;
	u8 Calc_value;
	HKPAD_Init();
    23b4:	0e 94 a9 0a 	call	0x1552	; 0x1552 <HKPAD_Init>
	HLCD_Init();
    23b8:	0e 94 a3 05 	call	0xb46	; 0xb46 <HLCD_Init>
	while (1) {

		if (HKPAD_GetKeyValue(&value)) {
    23bc:	ce 01       	movw	r24, r28
    23be:	45 96       	adiw	r24, 0x15	; 21
    23c0:	0e 94 b8 0a 	call	0x1570	; 0x1570 <HKPAD_GetKeyValue>
    23c4:	88 23       	and	r24, r24
    23c6:	d1 f3       	breq	.-12     	; 0x23bc <main+0x28>
			Calc_value = CALC_Num(value);
    23c8:	8d 89       	ldd	r24, Y+21	; 0x15
    23ca:	0e 94 9a 10 	call	0x2134	; 0x2134 <CALC_Num>
    23ce:	8e 8b       	std	Y+22, r24	; 0x16
			if (Calc_value == 'a') {
    23d0:	8e 89       	ldd	r24, Y+22	; 0x16
    23d2:	81 36       	cpi	r24, 0x61	; 97
    23d4:	51 f4       	brne	.+20     	; 0x23ea <main+0x56>
				HLCD_WriteCmd(HLCD_ClEARSCREEN);
    23d6:	81 e0       	ldi	r24, 0x01	; 1
    23d8:	0e 94 92 07 	call	0xf24	; 0xf24 <HLCD_WriteCmd>
				f = 0;
    23dc:	1a 82       	std	Y+2, r1	; 0x02
				i = 0;
    23de:	1b 82       	std	Y+3, r1	; 0x03
				sum1 = 0;
    23e0:	1a 86       	std	Y+10, r1	; 0x0a
    23e2:	19 86       	std	Y+9, r1	; 0x09
				sum2 = 0;
    23e4:	18 86       	std	Y+8, r1	; 0x08
    23e6:	1f 82       	std	Y+7, r1	; 0x07
    23e8:	e9 cf       	rjmp	.-46     	; 0x23bc <main+0x28>
			} else if ((Calc_value == '+') || (Calc_value == '-')
    23ea:	8e 89       	ldd	r24, Y+22	; 0x16
    23ec:	8b 32       	cpi	r24, 0x2B	; 43
    23ee:	49 f0       	breq	.+18     	; 0x2402 <main+0x6e>
    23f0:	8e 89       	ldd	r24, Y+22	; 0x16
    23f2:	8d 32       	cpi	r24, 0x2D	; 45
    23f4:	31 f0       	breq	.+12     	; 0x2402 <main+0x6e>
    23f6:	8e 89       	ldd	r24, Y+22	; 0x16
    23f8:	8a 32       	cpi	r24, 0x2A	; 42
    23fa:	19 f0       	breq	.+6      	; 0x2402 <main+0x6e>
    23fc:	8e 89       	ldd	r24, Y+22	; 0x16
    23fe:	8f 32       	cpi	r24, 0x2F	; 47
    2400:	99 f4       	brne	.+38     	; 0x2428 <main+0x94>
					|| (Calc_value == '*') || (Calc_value == '/')) {
				HLCD_WriteData(Calc_value);
    2402:	8e 89       	ldd	r24, Y+22	; 0x16
    2404:	0e 94 38 08 	call	0x1070	; 0x1070 <HLCD_WriteData>
				sum1 = Calc_Convert_to_number(arr, i - 1);
    2408:	8b 81       	ldd	r24, Y+3	; 0x03
    240a:	28 2f       	mov	r18, r24
    240c:	21 50       	subi	r18, 0x01	; 1
    240e:	ce 01       	movw	r24, r28
    2410:	0b 96       	adiw	r24, 0x0b	; 11
    2412:	62 2f       	mov	r22, r18
    2414:	0e 94 7e 11 	call	0x22fc	; 0x22fc <Calc_Convert_to_number>
    2418:	9a 87       	std	Y+10, r25	; 0x0a
    241a:	89 87       	std	Y+9, r24	; 0x09
				operator = Calc_value;
    241c:	8e 89       	ldd	r24, Y+22	; 0x16
    241e:	89 83       	std	Y+1, r24	; 0x01
				f = 1;
    2420:	81 e0       	ldi	r24, 0x01	; 1
    2422:	8a 83       	std	Y+2, r24	; 0x02
				i = 0;
    2424:	1b 82       	std	Y+3, r1	; 0x03
    2426:	ca cf       	rjmp	.-108    	; 0x23bc <main+0x28>
			} else if (Calc_value == '=') {
    2428:	8e 89       	ldd	r24, Y+22	; 0x16
    242a:	8d 33       	cpi	r24, 0x3D	; 61
    242c:	09 f0       	breq	.+2      	; 0x2430 <main+0x9c>
    242e:	60 c0       	rjmp	.+192    	; 0x24f0 <main+0x15c>
				f = 2;
    2430:	82 e0       	ldi	r24, 0x02	; 2
    2432:	8a 83       	std	Y+2, r24	; 0x02
				sum2 = Calc_Convert_to_number(arr, i - 1);
    2434:	8b 81       	ldd	r24, Y+3	; 0x03
    2436:	28 2f       	mov	r18, r24
    2438:	21 50       	subi	r18, 0x01	; 1
    243a:	ce 01       	movw	r24, r28
    243c:	0b 96       	adiw	r24, 0x0b	; 11
    243e:	62 2f       	mov	r22, r18
    2440:	0e 94 7e 11 	call	0x22fc	; 0x22fc <Calc_Convert_to_number>
    2444:	98 87       	std	Y+8, r25	; 0x08
    2446:	8f 83       	std	Y+7, r24	; 0x07
				HLCD_GoToXY(1, 0);
    2448:	81 e0       	ldi	r24, 0x01	; 1
    244a:	60 e0       	ldi	r22, 0x00	; 0
    244c:	0e 94 82 0a 	call	0x1504	; 0x1504 <HLCD_GoToXY>
				switch (operator) {
    2450:	89 81       	ldd	r24, Y+1	; 0x01
    2452:	28 2f       	mov	r18, r24
    2454:	30 e0       	ldi	r19, 0x00	; 0
    2456:	38 8f       	std	Y+24, r19	; 0x18
    2458:	2f 8b       	std	Y+23, r18	; 0x17
    245a:	4f 89       	ldd	r20, Y+23	; 0x17
    245c:	58 8d       	ldd	r21, Y+24	; 0x18
    245e:	4b 32       	cpi	r20, 0x2B	; 43
    2460:	51 05       	cpc	r21, r1
    2462:	b1 f0       	breq	.+44     	; 0x2490 <main+0xfc>
    2464:	8f 89       	ldd	r24, Y+23	; 0x17
    2466:	98 8d       	ldd	r25, Y+24	; 0x18
    2468:	8c 32       	cpi	r24, 0x2C	; 44
    246a:	91 05       	cpc	r25, r1
    246c:	34 f4       	brge	.+12     	; 0x247a <main+0xe6>
    246e:	2f 89       	ldd	r18, Y+23	; 0x17
    2470:	38 8d       	ldd	r19, Y+24	; 0x18
    2472:	2a 32       	cpi	r18, 0x2A	; 42
    2474:	31 05       	cpc	r19, r1
    2476:	f1 f0       	breq	.+60     	; 0x24b4 <main+0x120>
    2478:	36 c0       	rjmp	.+108    	; 0x24e6 <main+0x152>
    247a:	4f 89       	ldd	r20, Y+23	; 0x17
    247c:	58 8d       	ldd	r21, Y+24	; 0x18
    247e:	4d 32       	cpi	r20, 0x2D	; 45
    2480:	51 05       	cpc	r21, r1
    2482:	79 f0       	breq	.+30     	; 0x24a2 <main+0x10e>
    2484:	8f 89       	ldd	r24, Y+23	; 0x17
    2486:	98 8d       	ldd	r25, Y+24	; 0x18
    2488:	8f 32       	cpi	r24, 0x2F	; 47
    248a:	91 05       	cpc	r25, r1
    248c:	11 f1       	breq	.+68     	; 0x24d2 <main+0x13e>
    248e:	2b c0       	rjmp	.+86     	; 0x24e6 <main+0x152>
				case '+':
					sum = sum1 + sum2;
    2490:	89 85       	ldd	r24, Y+9	; 0x09
    2492:	9a 85       	ldd	r25, Y+10	; 0x0a
    2494:	2f 81       	ldd	r18, Y+7	; 0x07
    2496:	38 85       	ldd	r19, Y+8	; 0x08
    2498:	82 0f       	add	r24, r18
    249a:	93 1f       	adc	r25, r19
    249c:	9e 83       	std	Y+6, r25	; 0x06
    249e:	8d 83       	std	Y+5, r24	; 0x05
    24a0:	22 c0       	rjmp	.+68     	; 0x24e6 <main+0x152>
					break;
				case '-':
					sum = sum1 - sum2;
    24a2:	89 85       	ldd	r24, Y+9	; 0x09
    24a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    24a6:	2f 81       	ldd	r18, Y+7	; 0x07
    24a8:	38 85       	ldd	r19, Y+8	; 0x08
    24aa:	82 1b       	sub	r24, r18
    24ac:	93 0b       	sbc	r25, r19
    24ae:	9e 83       	std	Y+6, r25	; 0x06
    24b0:	8d 83       	std	Y+5, r24	; 0x05
    24b2:	19 c0       	rjmp	.+50     	; 0x24e6 <main+0x152>
					break;
				case '*':
					sum = sum1 * sum2;
    24b4:	89 85       	ldd	r24, Y+9	; 0x09
    24b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    24b8:	2f 81       	ldd	r18, Y+7	; 0x07
    24ba:	38 85       	ldd	r19, Y+8	; 0x08
    24bc:	ac 01       	movw	r20, r24
    24be:	42 9f       	mul	r20, r18
    24c0:	c0 01       	movw	r24, r0
    24c2:	43 9f       	mul	r20, r19
    24c4:	90 0d       	add	r25, r0
    24c6:	52 9f       	mul	r21, r18
    24c8:	90 0d       	add	r25, r0
    24ca:	11 24       	eor	r1, r1
    24cc:	9e 83       	std	Y+6, r25	; 0x06
    24ce:	8d 83       	std	Y+5, r24	; 0x05
    24d0:	0a c0       	rjmp	.+20     	; 0x24e6 <main+0x152>
					break;
				case '/':
					sum = sum1 / sum2;
    24d2:	89 85       	ldd	r24, Y+9	; 0x09
    24d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    24d6:	2f 81       	ldd	r18, Y+7	; 0x07
    24d8:	38 85       	ldd	r19, Y+8	; 0x08
    24da:	b9 01       	movw	r22, r18
    24dc:	0e 94 a7 12 	call	0x254e	; 0x254e <__udivmodhi4>
    24e0:	cb 01       	movw	r24, r22
    24e2:	9e 83       	std	Y+6, r25	; 0x06
    24e4:	8d 83       	std	Y+5, r24	; 0x05
				default:
					break;

				}

				HLCD_enuWriteNum(sum);
    24e6:	8d 81       	ldd	r24, Y+5	; 0x05
    24e8:	9e 81       	ldd	r25, Y+6	; 0x06
    24ea:	0e 94 85 09 	call	0x130a	; 0x130a <HLCD_enuWriteNum>
    24ee:	66 cf       	rjmp	.-308    	; 0x23bc <main+0x28>

			} else if (f == 1) {
    24f0:	8a 81       	ldd	r24, Y+2	; 0x02
    24f2:	81 30       	cpi	r24, 0x01	; 1
    24f4:	b1 f4       	brne	.+44     	; 0x2522 <main+0x18e>
				HLCD_WriteData(Calc_value);
    24f6:	8e 89       	ldd	r24, Y+22	; 0x16
    24f8:	0e 94 38 08 	call	0x1070	; 0x1070 <HLCD_WriteData>
				chtoint = atoi(&Calc_value);
    24fc:	ce 01       	movw	r24, r28
    24fe:	46 96       	adiw	r24, 0x16	; 22
    2500:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <atoi>
    2504:	8c 83       	std	Y+4, r24	; 0x04
				arr[i++] = chtoint;
    2506:	8b 81       	ldd	r24, Y+3	; 0x03
    2508:	28 2f       	mov	r18, r24
    250a:	30 e0       	ldi	r19, 0x00	; 0
    250c:	ce 01       	movw	r24, r28
    250e:	0b 96       	adiw	r24, 0x0b	; 11
    2510:	fc 01       	movw	r30, r24
    2512:	e2 0f       	add	r30, r18
    2514:	f3 1f       	adc	r31, r19
    2516:	8c 81       	ldd	r24, Y+4	; 0x04
    2518:	80 83       	st	Z, r24
    251a:	8b 81       	ldd	r24, Y+3	; 0x03
    251c:	8f 5f       	subi	r24, 0xFF	; 255
    251e:	8b 83       	std	Y+3, r24	; 0x03
    2520:	4d cf       	rjmp	.-358    	; 0x23bc <main+0x28>
			} else {
				HLCD_WriteData(Calc_value);
    2522:	8e 89       	ldd	r24, Y+22	; 0x16
    2524:	0e 94 38 08 	call	0x1070	; 0x1070 <HLCD_WriteData>
				chtoint = atoi(&Calc_value);
    2528:	ce 01       	movw	r24, r28
    252a:	46 96       	adiw	r24, 0x16	; 22
    252c:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <atoi>
    2530:	8c 83       	std	Y+4, r24	; 0x04
				arr[i++] = chtoint;
    2532:	8b 81       	ldd	r24, Y+3	; 0x03
    2534:	28 2f       	mov	r18, r24
    2536:	30 e0       	ldi	r19, 0x00	; 0
    2538:	ce 01       	movw	r24, r28
    253a:	0b 96       	adiw	r24, 0x0b	; 11
    253c:	fc 01       	movw	r30, r24
    253e:	e2 0f       	add	r30, r18
    2540:	f3 1f       	adc	r31, r19
    2542:	8c 81       	ldd	r24, Y+4	; 0x04
    2544:	80 83       	st	Z, r24
    2546:	8b 81       	ldd	r24, Y+3	; 0x03
    2548:	8f 5f       	subi	r24, 0xFF	; 255
    254a:	8b 83       	std	Y+3, r24	; 0x03
    254c:	37 cf       	rjmp	.-402    	; 0x23bc <main+0x28>

0000254e <__udivmodhi4>:
    254e:	aa 1b       	sub	r26, r26
    2550:	bb 1b       	sub	r27, r27
    2552:	51 e1       	ldi	r21, 0x11	; 17
    2554:	07 c0       	rjmp	.+14     	; 0x2564 <__udivmodhi4_ep>

00002556 <__udivmodhi4_loop>:
    2556:	aa 1f       	adc	r26, r26
    2558:	bb 1f       	adc	r27, r27
    255a:	a6 17       	cp	r26, r22
    255c:	b7 07       	cpc	r27, r23
    255e:	10 f0       	brcs	.+4      	; 0x2564 <__udivmodhi4_ep>
    2560:	a6 1b       	sub	r26, r22
    2562:	b7 0b       	sbc	r27, r23

00002564 <__udivmodhi4_ep>:
    2564:	88 1f       	adc	r24, r24
    2566:	99 1f       	adc	r25, r25
    2568:	5a 95       	dec	r21
    256a:	a9 f7       	brne	.-22     	; 0x2556 <__udivmodhi4_loop>
    256c:	80 95       	com	r24
    256e:	90 95       	com	r25
    2570:	bc 01       	movw	r22, r24
    2572:	cd 01       	movw	r24, r26
    2574:	08 95       	ret

00002576 <__prologue_saves__>:
    2576:	2f 92       	push	r2
    2578:	3f 92       	push	r3
    257a:	4f 92       	push	r4
    257c:	5f 92       	push	r5
    257e:	6f 92       	push	r6
    2580:	7f 92       	push	r7
    2582:	8f 92       	push	r8
    2584:	9f 92       	push	r9
    2586:	af 92       	push	r10
    2588:	bf 92       	push	r11
    258a:	cf 92       	push	r12
    258c:	df 92       	push	r13
    258e:	ef 92       	push	r14
    2590:	ff 92       	push	r15
    2592:	0f 93       	push	r16
    2594:	1f 93       	push	r17
    2596:	cf 93       	push	r28
    2598:	df 93       	push	r29
    259a:	cd b7       	in	r28, 0x3d	; 61
    259c:	de b7       	in	r29, 0x3e	; 62
    259e:	ca 1b       	sub	r28, r26
    25a0:	db 0b       	sbc	r29, r27
    25a2:	0f b6       	in	r0, 0x3f	; 63
    25a4:	f8 94       	cli
    25a6:	de bf       	out	0x3e, r29	; 62
    25a8:	0f be       	out	0x3f, r0	; 63
    25aa:	cd bf       	out	0x3d, r28	; 61
    25ac:	09 94       	ijmp

000025ae <__epilogue_restores__>:
    25ae:	2a 88       	ldd	r2, Y+18	; 0x12
    25b0:	39 88       	ldd	r3, Y+17	; 0x11
    25b2:	48 88       	ldd	r4, Y+16	; 0x10
    25b4:	5f 84       	ldd	r5, Y+15	; 0x0f
    25b6:	6e 84       	ldd	r6, Y+14	; 0x0e
    25b8:	7d 84       	ldd	r7, Y+13	; 0x0d
    25ba:	8c 84       	ldd	r8, Y+12	; 0x0c
    25bc:	9b 84       	ldd	r9, Y+11	; 0x0b
    25be:	aa 84       	ldd	r10, Y+10	; 0x0a
    25c0:	b9 84       	ldd	r11, Y+9	; 0x09
    25c2:	c8 84       	ldd	r12, Y+8	; 0x08
    25c4:	df 80       	ldd	r13, Y+7	; 0x07
    25c6:	ee 80       	ldd	r14, Y+6	; 0x06
    25c8:	fd 80       	ldd	r15, Y+5	; 0x05
    25ca:	0c 81       	ldd	r16, Y+4	; 0x04
    25cc:	1b 81       	ldd	r17, Y+3	; 0x03
    25ce:	aa 81       	ldd	r26, Y+2	; 0x02
    25d0:	b9 81       	ldd	r27, Y+1	; 0x01
    25d2:	ce 0f       	add	r28, r30
    25d4:	d1 1d       	adc	r29, r1
    25d6:	0f b6       	in	r0, 0x3f	; 63
    25d8:	f8 94       	cli
    25da:	de bf       	out	0x3e, r29	; 62
    25dc:	0f be       	out	0x3f, r0	; 63
    25de:	cd bf       	out	0x3d, r28	; 61
    25e0:	ed 01       	movw	r28, r26
    25e2:	08 95       	ret

000025e4 <atoi>:
    25e4:	fc 01       	movw	r30, r24
    25e6:	88 27       	eor	r24, r24
    25e8:	99 27       	eor	r25, r25
    25ea:	e8 94       	clt
    25ec:	21 91       	ld	r18, Z+
    25ee:	20 32       	cpi	r18, 0x20	; 32
    25f0:	e9 f3       	breq	.-6      	; 0x25ec <atoi+0x8>
    25f2:	29 30       	cpi	r18, 0x09	; 9
    25f4:	10 f0       	brcs	.+4      	; 0x25fa <atoi+0x16>
    25f6:	2e 30       	cpi	r18, 0x0E	; 14
    25f8:	c8 f3       	brcs	.-14     	; 0x25ec <atoi+0x8>
    25fa:	2b 32       	cpi	r18, 0x2B	; 43
    25fc:	41 f0       	breq	.+16     	; 0x260e <atoi+0x2a>
    25fe:	2d 32       	cpi	r18, 0x2D	; 45
    2600:	39 f4       	brne	.+14     	; 0x2610 <atoi+0x2c>
    2602:	68 94       	set
    2604:	04 c0       	rjmp	.+8      	; 0x260e <atoi+0x2a>
    2606:	0e 94 10 13 	call	0x2620	; 0x2620 <__mulhi_const_10>
    260a:	82 0f       	add	r24, r18
    260c:	91 1d       	adc	r25, r1
    260e:	21 91       	ld	r18, Z+
    2610:	20 53       	subi	r18, 0x30	; 48
    2612:	2a 30       	cpi	r18, 0x0A	; 10
    2614:	c0 f3       	brcs	.-16     	; 0x2606 <atoi+0x22>
    2616:	1e f4       	brtc	.+6      	; 0x261e <atoi+0x3a>
    2618:	90 95       	com	r25
    261a:	81 95       	neg	r24
    261c:	9f 4f       	sbci	r25, 0xFF	; 255
    261e:	08 95       	ret

00002620 <__mulhi_const_10>:
    2620:	7a e0       	ldi	r23, 0x0A	; 10
    2622:	97 9f       	mul	r25, r23
    2624:	90 2d       	mov	r25, r0
    2626:	87 9f       	mul	r24, r23
    2628:	80 2d       	mov	r24, r0
    262a:	91 0d       	add	r25, r1
    262c:	11 24       	eor	r1, r1
    262e:	08 95       	ret

00002630 <_exit>:
    2630:	f8 94       	cli

00002632 <__stop_program>:
    2632:	ff cf       	rjmp	.-2      	; 0x2632 <__stop_program>
